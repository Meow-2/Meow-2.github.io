import{_ as i}from"./ValaxyMain.vue_vue_type_style_index_0_lang-bf8ee3fd.js";import{_ as y,p as F,c as D,w as e,o as d,e as h,a as l,d as s,b as n,r as a,f as u}from"./app-4433fae6.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-80290804.js";import"./YunCard.vue_vue_type_style_index_0_lang-e4df850e.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-80be03ea.js";const qe=JSON.parse('{"title":"C++面向对象程序设计复习笔记（上）","description":"","frontmatter":{"title":"C++面向对象程序设计复习笔记（上）","toc":true,"date":"2021-09-11T12:41:00.000Z","tags":["OPP","Cpp"],"categories":["笔记","侯捷 C++八部曲"],"cover":null},"headers":[{"level":2,"title":"1. \\".h\\" 和 \\".cpp\\"","slug":"_1-h-和-cpp","link":"#_1-h-和-cpp","children":[]},{"level":2,"title":"2. 防卫式声明","slug":"_2-防卫式声明","link":"#_2-防卫式声明","children":[]},{"level":2,"title":"3. inline（内联函数）","slug":"_3-inline（内联函数）","link":"#_3-inline（内联函数）","children":[]},{"level":2,"title":"4. access level（访问级别）","slug":"_4-access-level（访问级别）","link":"#_4-access-level（访问级别）","children":[]},{"level":2,"title":"1. constructor（ctor，构造函数）","slug":"_1-constructor（ctor，构造函数）","link":"#_1-constructor（ctor，构造函数）","children":[]},{"level":2,"title":"1. const member function（常量成员函数）","slug":"_1-const-member-function（常量成员函数）","link":"#_1-const-member-function（常量成员函数）","children":[]},{"level":2,"title":"2. pass by value vs. pass by reference（to const)(参数传递)","slug":"_2-pass-by-value-vs-pass-by-reference（to-const-参数传递","link":"#_2-pass-by-value-vs-pass-by-reference（to-const-参数传递","children":[]},{"level":2,"title":"3. return by value vs. return by reference（to const)(返回值传递)","slug":"_3-return-by-value-vs-return-by-reference（to-const-返回值传递","link":"#_3-return-by-value-vs-return-by-reference（to-const-返回值传递","children":[]},{"level":2,"title":"4. friend（友元）","slug":"_4-friend（友元）","link":"#_4-friend（友元）","children":[]},{"level":2,"title":"5. 相同 class 的各个 objects 互为 friends(友元)","slug":"_5-相同-class-的各个-objects-互为-friends-友元","link":"#_5-相同-class-的各个-objects-互为-friends-友元","children":[]},{"level":2,"title":"1. operator overloading -1（双目操作符重载，by 成员函数）","slug":"_1-operator-overloading-1（双目操作符重载，by-成员函数）","link":"#_1-operator-overloading-1（双目操作符重载，by-成员函数）","children":[]},{"level":2,"title":"2. return by reference 语法分析","slug":"_2-return-by-reference-语法分析","link":"#_2-return-by-reference-语法分析","children":[]},{"level":2,"title":"3. operator overloading -2（双目操作符重载，by 非成员函数）","slug":"_3-operator-overloading-2（双目操作符重载，by-非成员函数）","link":"#_3-operator-overloading-2（双目操作符重载，by-非成员函数）","children":[]},{"level":2,"title":"4. temp object（临时对象，\\"typename（）\\"）","slug":"_4-temp-object（临时对象，-typename（）-）","link":"#_4-temp-object（临时对象，-typename（）-）","children":[]},{"level":2,"title":"5. operator overloading -3（单目运算符重载，非成员函数）","slug":"_5-operator-overloading-3（单目运算符重载，非成员函数）","link":"#_5-operator-overloading-3（单目运算符重载，非成员函数）","children":[]},{"level":2,"title":"6. operator overloading -4 (<<双目运算符重载，非成员函数)","slug":"_6-operator-overloading-4-双目运算符重载，非成员函数","link":"#_6-operator-overloading-4-双目运算符重载，非成员函数","children":[]},{"level":2,"title":"1. 所有的数据放在 private 里","slug":"_1-所有的数据放在-private-里","link":"#_1-所有的数据放在-private-里","children":[]},{"level":2,"title":"2. 使用初始化列表来初始化对象","slug":"_2-使用初始化列表来初始化对象","link":"#_2-使用初始化列表来初始化对象","children":[]},{"level":2,"title":"3. 所有大于四字节的参数传递都用引用，除了 local object","slug":"_3-所有大于四字节的参数传递都用引用，除了-local-object","link":"#_3-所有大于四字节的参数传递都用引用，除了-local-object","children":[]},{"level":2,"title":"4. 所有不想被修改的地方都要加 const","slug":"_4-所有不想被修改的地方都要加-const","link":"#_4-所有不想被修改的地方都要加-const","children":[]},{"level":2,"title":"1. Implement A Class With Pointer Members(string.h)","slug":"_1-implement-a-class-with-pointer-members-string-h","link":"#_1-implement-a-class-with-pointer-members-string-h","children":[]},{"level":2,"title":"2. Big Three（三个特殊函数）","slug":"_2-big-three（三个特殊函数）","link":"#_2-big-three（三个特殊函数）","children":[]},{"level":2,"title":"0. Size of Variables","slug":"_0-size-of-variables","link":"#_0-size-of-variables","children":[]},{"level":2,"title":"1. Stack（栈）","slug":"_1-stack（栈）","link":"#_1-stack（栈）","children":[]},{"level":2,"title":"2. Heap（堆）","slug":"_2-heap（堆）","link":"#_2-heap（堆）","children":[]},{"level":2,"title":"3. Stack Object, Static local objects, Global objects, Heap objects","slug":"_3-stack-object-static-local-objects-global-objects-heap-objects","link":"#_3-stack-object-static-local-objects-global-objects-heap-objects","children":[]},{"level":2,"title":"4. new: 先分配内存，再调用 ctor","slug":"_4-new-先分配内存，再调用-ctor","link":"#_4-new-先分配内存，再调用-ctor","children":[]},{"level":2,"title":"5. delete:先调用 dtor，再释放内存","slug":"_5-delete-先调用-dtor，再释放内存","link":"#_5-delete-先调用-dtor，再释放内存","children":[]},{"level":2,"title":"6. 内存分配","slug":"_6-内存分配","link":"#_6-内存分配","children":[]},{"level":2,"title":"7. Array new 一定要搭配 Array delete","slug":"_7-array-new-一定要搭配-array-delete","link":"#_7-array-new-一定要搭配-array-delete","children":[]},{"level":2,"title":"","slug":"-1","link":"#-1","children":[]},{"level":2,"title":"1. Static","slug":"_1-static","link":"#_1-static","children":[]},{"level":2,"title":"2. 把 ctors 放在 private 里","slug":"_2-把-ctors-放在-private-里","link":"#_2-把-ctors-放在-private-里","children":[]},{"level":2,"title":"3. Namespace","slug":"_3-namespace","link":"#_3-namespace","children":[]},{"level":2,"title":"4. Template","slug":"_4-template","link":"#_4-template","children":[]},{"level":2,"title":"5. More details","slug":"_5-more-details","link":"#_5-more-details","children":[]},{"level":2,"title":"1. Composition（组合），表示 has-a","slug":"_1-composition（组合），表示-has-a","link":"#_1-composition（组合），表示-has-a","children":[]},{"level":2,"title":"2. Composition (组合) 关系中的构造和析构","slug":"_2-composition-组合-关系中的构造和析构","link":"#_2-composition-组合-关系中的构造和析构","children":[]},{"level":2,"title":"3. Delegation（委托），Composition by reference","slug":"_3-delegation（委托），composition-by-reference","link":"#_3-delegation（委托），composition-by-reference","children":[]},{"level":2,"title":"4. Inheritance（继承），表示 is - a","slug":"_4-inheritance（继承），表示-is-a","link":"#_4-inheritance（继承），表示-is-a","children":[]},{"level":2,"title":"5. Inheritance（继承）关系下的构造和析构","slug":"_5-inheritance（继承）关系下的构造和析构","link":"#_5-inheritance（继承）关系下的构造和析构","children":[]},{"level":2,"title":"1. 三种虚函数","slug":"_1-三种虚函数","link":"#_1-三种虚函数","children":[]},{"level":2,"title":"2. derived class 调用父类函数","slug":"_2-derived-class-调用父类函数","link":"#_2-derived-class-调用父类函数","children":[]},{"level":2,"title":"3. Inheritance + Composition 关系下的 ctor and dtor","slug":"_3-inheritance-composition-关系下的-ctor-and-dtor","link":"#_3-inheritance-composition-关系下的-ctor-and-dtor","children":[]},{"level":2,"title":"1. Inhertance + Delegation,Composite(混合模式)","slug":"_1-inhertance-delegation-composite-混合模式","link":"#_1-inhertance-delegation-composite-混合模式","children":[]},{"level":2,"title":"2. Inhertance + Delegation,Prototype(原型模式)","slug":"_2-inhertance-delegation-prototype-原型模式","link":"#_2-inhertance-delegation-prototype-原型模式","children":[]}],"relativePath":"pages/posts/note/houjie/object-oriented-programming.md","path":"/home/runner/work/YlYZ/YlYZ/pages/posts/note/houjie/object-oriented-programming.md","lastUpdated":1686297441000}'),c=JSON.parse('{"title":"C++面向对象程序设计复习笔记（上）","description":"","frontmatter":{"title":"C++面向对象程序设计复习笔记（上）","toc":true,"date":"2021-09-11T12:41:00.000Z","tags":["OPP","Cpp"],"categories":["笔记","侯捷 C++八部曲"],"cover":null},"headers":[{"level":2,"title":"1. \\".h\\" 和 \\".cpp\\"","slug":"_1-h-和-cpp","link":"#_1-h-和-cpp","children":[]},{"level":2,"title":"2. 防卫式声明","slug":"_2-防卫式声明","link":"#_2-防卫式声明","children":[]},{"level":2,"title":"3. inline（内联函数）","slug":"_3-inline（内联函数）","link":"#_3-inline（内联函数）","children":[]},{"level":2,"title":"4. access level（访问级别）","slug":"_4-access-level（访问级别）","link":"#_4-access-level（访问级别）","children":[]},{"level":2,"title":"1. constructor（ctor，构造函数）","slug":"_1-constructor（ctor，构造函数）","link":"#_1-constructor（ctor，构造函数）","children":[]},{"level":2,"title":"1. const member function（常量成员函数）","slug":"_1-const-member-function（常量成员函数）","link":"#_1-const-member-function（常量成员函数）","children":[]},{"level":2,"title":"2. pass by value vs. pass by reference（to const)(参数传递)","slug":"_2-pass-by-value-vs-pass-by-reference（to-const-参数传递","link":"#_2-pass-by-value-vs-pass-by-reference（to-const-参数传递","children":[]},{"level":2,"title":"3. return by value vs. return by reference（to const)(返回值传递)","slug":"_3-return-by-value-vs-return-by-reference（to-const-返回值传递","link":"#_3-return-by-value-vs-return-by-reference（to-const-返回值传递","children":[]},{"level":2,"title":"4. friend（友元）","slug":"_4-friend（友元）","link":"#_4-friend（友元）","children":[]},{"level":2,"title":"5. 相同 class 的各个 objects 互为 friends(友元)","slug":"_5-相同-class-的各个-objects-互为-friends-友元","link":"#_5-相同-class-的各个-objects-互为-friends-友元","children":[]},{"level":2,"title":"1. operator overloading -1（双目操作符重载，by 成员函数）","slug":"_1-operator-overloading-1（双目操作符重载，by-成员函数）","link":"#_1-operator-overloading-1（双目操作符重载，by-成员函数）","children":[]},{"level":2,"title":"2. return by reference 语法分析","slug":"_2-return-by-reference-语法分析","link":"#_2-return-by-reference-语法分析","children":[]},{"level":2,"title":"3. operator overloading -2（双目操作符重载，by 非成员函数）","slug":"_3-operator-overloading-2（双目操作符重载，by-非成员函数）","link":"#_3-operator-overloading-2（双目操作符重载，by-非成员函数）","children":[]},{"level":2,"title":"4. temp object（临时对象，\\"typename（）\\"）","slug":"_4-temp-object（临时对象，-typename（）-）","link":"#_4-temp-object（临时对象，-typename（）-）","children":[]},{"level":2,"title":"5. operator overloading -3（单目运算符重载，非成员函数）","slug":"_5-operator-overloading-3（单目运算符重载，非成员函数）","link":"#_5-operator-overloading-3（单目运算符重载，非成员函数）","children":[]},{"level":2,"title":"6. operator overloading -4 (<<双目运算符重载，非成员函数)","slug":"_6-operator-overloading-4-双目运算符重载，非成员函数","link":"#_6-operator-overloading-4-双目运算符重载，非成员函数","children":[]},{"level":2,"title":"1. 所有的数据放在 private 里","slug":"_1-所有的数据放在-private-里","link":"#_1-所有的数据放在-private-里","children":[]},{"level":2,"title":"2. 使用初始化列表来初始化对象","slug":"_2-使用初始化列表来初始化对象","link":"#_2-使用初始化列表来初始化对象","children":[]},{"level":2,"title":"3. 所有大于四字节的参数传递都用引用，除了 local object","slug":"_3-所有大于四字节的参数传递都用引用，除了-local-object","link":"#_3-所有大于四字节的参数传递都用引用，除了-local-object","children":[]},{"level":2,"title":"4. 所有不想被修改的地方都要加 const","slug":"_4-所有不想被修改的地方都要加-const","link":"#_4-所有不想被修改的地方都要加-const","children":[]},{"level":2,"title":"1. Implement A Class With Pointer Members(string.h)","slug":"_1-implement-a-class-with-pointer-members-string-h","link":"#_1-implement-a-class-with-pointer-members-string-h","children":[]},{"level":2,"title":"2. Big Three（三个特殊函数）","slug":"_2-big-three（三个特殊函数）","link":"#_2-big-three（三个特殊函数）","children":[]},{"level":2,"title":"0. Size of Variables","slug":"_0-size-of-variables","link":"#_0-size-of-variables","children":[]},{"level":2,"title":"1. Stack（栈）","slug":"_1-stack（栈）","link":"#_1-stack（栈）","children":[]},{"level":2,"title":"2. Heap（堆）","slug":"_2-heap（堆）","link":"#_2-heap（堆）","children":[]},{"level":2,"title":"3. Stack Object, Static local objects, Global objects, Heap objects","slug":"_3-stack-object-static-local-objects-global-objects-heap-objects","link":"#_3-stack-object-static-local-objects-global-objects-heap-objects","children":[]},{"level":2,"title":"4. new: 先分配内存，再调用 ctor","slug":"_4-new-先分配内存，再调用-ctor","link":"#_4-new-先分配内存，再调用-ctor","children":[]},{"level":2,"title":"5. delete:先调用 dtor，再释放内存","slug":"_5-delete-先调用-dtor，再释放内存","link":"#_5-delete-先调用-dtor，再释放内存","children":[]},{"level":2,"title":"6. 内存分配","slug":"_6-内存分配","link":"#_6-内存分配","children":[]},{"level":2,"title":"7. Array new 一定要搭配 Array delete","slug":"_7-array-new-一定要搭配-array-delete","link":"#_7-array-new-一定要搭配-array-delete","children":[]},{"level":2,"title":"","slug":"-1","link":"#-1","children":[]},{"level":2,"title":"1. Static","slug":"_1-static","link":"#_1-static","children":[]},{"level":2,"title":"2. 把 ctors 放在 private 里","slug":"_2-把-ctors-放在-private-里","link":"#_2-把-ctors-放在-private-里","children":[]},{"level":2,"title":"3. Namespace","slug":"_3-namespace","link":"#_3-namespace","children":[]},{"level":2,"title":"4. Template","slug":"_4-template","link":"#_4-template","children":[]},{"level":2,"title":"5. More details","slug":"_5-more-details","link":"#_5-more-details","children":[]},{"level":2,"title":"1. Composition（组合），表示 has-a","slug":"_1-composition（组合），表示-has-a","link":"#_1-composition（组合），表示-has-a","children":[]},{"level":2,"title":"2. Composition (组合) 关系中的构造和析构","slug":"_2-composition-组合-关系中的构造和析构","link":"#_2-composition-组合-关系中的构造和析构","children":[]},{"level":2,"title":"3. Delegation（委托），Composition by reference","slug":"_3-delegation（委托），composition-by-reference","link":"#_3-delegation（委托），composition-by-reference","children":[]},{"level":2,"title":"4. Inheritance（继承），表示 is - a","slug":"_4-inheritance（继承），表示-is-a","link":"#_4-inheritance（继承），表示-is-a","children":[]},{"level":2,"title":"5. Inheritance（继承）关系下的构造和析构","slug":"_5-inheritance（继承）关系下的构造和析构","link":"#_5-inheritance（继承）关系下的构造和析构","children":[]},{"level":2,"title":"1. 三种虚函数","slug":"_1-三种虚函数","link":"#_1-三种虚函数","children":[]},{"level":2,"title":"2. derived class 调用父类函数","slug":"_2-derived-class-调用父类函数","link":"#_2-derived-class-调用父类函数","children":[]},{"level":2,"title":"3. Inheritance + Composition 关系下的 ctor and dtor","slug":"_3-inheritance-composition-关系下的-ctor-and-dtor","link":"#_3-inheritance-composition-关系下的-ctor-and-dtor","children":[]},{"level":2,"title":"1. Inhertance + Delegation,Composite(混合模式)","slug":"_1-inhertance-delegation-composite-混合模式","link":"#_1-inhertance-delegation-composite-混合模式","children":[]},{"level":2,"title":"2. Inhertance + Delegation,Prototype(原型模式)","slug":"_2-inhertance-delegation-prototype-原型模式","link":"#_2-inhertance-delegation-prototype-原型模式","children":[]}],"relativePath":"pages/posts/note/houjie/object-oriented-programming.md","path":"/home/runner/work/YlYZ/YlYZ/pages/posts/note/houjie/object-oriented-programming.md","lastUpdated":1686297441000}'),A={name:"pages/posts/note/houjie/object-oriented-programming.md",data(){return{data:c,frontmatter:c.frontmatter}},setup(){F("pageData",c)}},C=l("p",null,"侯捷 C++面向对象程序设计的上半部分笔记",-1),_=l("meta",{name:"referrer",content:"no-referrer"},null,-1),g={id:"class-without-pointer-members",tabindex:"-1"},b={id:"一、头文件与类的声明",tabindex:"-1"},m={id:"_1-h-和-cpp",tabindex:"-1"},f=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632367689501-1ee1537c-cadf-4b32-a752-35991da8ea10.png#clientId=u5f81c45f-76d6-4&from=paste&id=ub370c109&margin=%5Bobject%20Object%5D&name=image.png&originHeight=277&originWidth=986&originalType=binary&ratio=1&size=31324&status=done&style=none&taskId=ub6436f2c-8d3a-4b7b-b8a0-cda4e401428",alt:""})],-1),v=l("ul",null,[l("li",null,'".h"和".cpp"并不是绝对的，也有".hpp"等后缀命名方式'),l("li",null,"两类 class，class with pointer members，class with no pointer members"),l("li",null,"C++的一个编译单元由一个.cpp 和它包含的.h 文件组成，编译单元在编译后，和其他编译单元进行链接生成可执行文件")],-1),E={id:"_2-防卫式声明",tabindex:"-1"},B=l("div",{class:"language-cpp complex.h"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"//头文件布局")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF","font-style":"italic"}},"#ifndef"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"__COMPLEX__")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF","font-style":"italic"}},"#define"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"__COMPLEX__")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"//forward declarations(0.前置声明)")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"ostream"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"complex"),l("span",{style:{color:"#89DDFF"}},"&")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"    "),l("span",{style:{color:"#82AAFF"}},"__doapl"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"complex"),l("span",{style:{color:"#89DDFF"}},"*"),l("span",{style:{color:"#A6ACCD"}}," ths"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#A6ACCD"}}," complex"),l("span",{style:{color:"#89DDFF"}},"&"),l("span",{style:{color:"#A6ACCD"}}," r"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"//class declarations(1.类声明)")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"...")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"};")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"//class definition(2.类定义)")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#A6ACCD"}},"function ...")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF","font-style":"italic"}},"#endif")]),s(`
`),l("span",{class:"line"})])])],-1),k=l("ul",null,[l("li",null,"防止重复包含，先写 1，2 然后可能需要写 0")],-1),x={id:"_3-inline（内联函数）",tabindex:"-1"},j=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"complex"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"double"),l("span",{style:{color:"#F07178"}}," r "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#F78C6C"}},"0"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#C792EA"}},"double"),l("span",{style:{color:"#F07178"}}," i "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#F78C6C"}},"0"),l("span",{style:{color:"#89DDFF"}},")")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"        : "),l("span",{style:{color:"#82AAFF"}},"re"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#F07178"}},"r"),l("span",{style:{color:"#89DDFF"}},"),"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"im"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#F07178"}},"i"),l("span",{style:{color:"#89DDFF"}},")")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#F78C6C"}},"operator"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"+="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"double"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"real"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," re"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}"),l("span",{style:{color:"#676E95","font-style":"italic"}},"   //函数若在 class body 内定义完成")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"double"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"imag"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," im"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}"),l("span",{style:{color:"#676E95","font-style":"italic"}},"   //则自动成为 inline 候选人")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"private"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"double"),l("span",{style:{color:"#F07178"}}," re"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#F07178"}},"im"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"friend"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"__doapl"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"*"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"};")]),s(`
`),l("span",{class:"line"})])])],-1),I=l("p",null,"inline 写法：",-1),w=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"inline"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#C792EA"}},"double")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#82AAFF"}},"imag"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#A6ACCD"}}," complex"),l("span",{style:{color:"#89DDFF"}},"&"),l("span",{style:{color:"#A6ACCD"}}," x"),l("span",{style:{color:"#89DDFF"}},")"),l("span",{style:{color:"#676E95","font-style":"italic"}},"       //在 claas body 外定义的函数，可以用过加上 inline 关键字来成为 inline 候选人")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD"}},"x"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#82AAFF"}},"imag"),l("span",{style:{color:"#89DDFF"}},"();")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"})])])],-1),S=l("ul",null,[l("li",null,"inline 函数的执行速度会变快，但 inline 只是对编译器的一种建议，能否变成 inline 函数要看编译器如何决定，一般足够简单的函数才可以变成 inline 函数")],-1),T={id:"_4-access-level（访问级别）",tabindex:"-1"},q=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#89DDFF"}},":"),l("span",{style:{color:"#676E95","font-style":"italic"}},"            //公共的，外界可以拿（访问）")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"complex"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"double"),l("span",{style:{color:"#F07178"}}," r "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#F78C6C"}},"0"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#C792EA"}},"double"),l("span",{style:{color:"#F07178"}}," i "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#F78C6C"}},"0"),l("span",{style:{color:"#89DDFF"}},")")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"        : "),l("span",{style:{color:"#82AAFF"}},"re"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#F07178"}},"r"),l("span",{style:{color:"#89DDFF"}},"),"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"im"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#F07178"}},"i"),l("span",{style:{color:"#89DDFF"}},")")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#F78C6C"}},"operator"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"+="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"double"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"real"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," re"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"double"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"imag"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," im"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"private"),l("span",{style:{color:"#89DDFF"}},":"),l("span",{style:{color:"#676E95","font-style":"italic"}},"           //私密的，外界不可以拿（访问）")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"double"),l("span",{style:{color:"#F07178"}}," re"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#F07178"}},"im"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"friend"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"__doapl"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"*"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"};")]),s(`
`),l("span",{class:"line"})])])],-1),z=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}}," complex "),l("span",{style:{color:"#82AAFF"}},"c1"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#F78C6C"}},"2"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#F78C6C"}},"1"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    cout "),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD"}},"c1"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#A6ACCD"}},"re"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#676E95","font-style":"italic"}}," //编译器报错")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    cout "),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD"}},"c1"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#A6ACCD"}},"im"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#676E95","font-style":"italic"}},"  //编译器报错")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    cout "),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD"}},"c1"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#82AAFF"}},"real"),l("span",{style:{color:"#89DDFF"}},"();"),l("span",{style:{color:"#676E95","font-style":"italic"}}," //正确")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    cout "),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD"}},"c1"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#82AAFF"}},"imag"),l("span",{style:{color:"#89DDFF"}},"();"),l("span",{style:{color:"#676E95","font-style":"italic"}}," //正确")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"})])])],-1),O=l("ul",null,[l("li",null,[l("strong",null,"所有数据和不准备被外界调用的函数都应该放在 private 中，外界不可以来拿（访问）private 里的数据")])],-1),H={id:"二、构造函数",tabindex:"-1"},W={id:"_1-constructor（ctor，构造函数）",tabindex:"-1"},L=l("ul",null,[l("li",null,[l("strong",null,"使用初始化参数列表而不是赋值"),s("，初始化列表的执行在"),l("code",null,"{}"),s("之前，Cpp 属于 Free Format 编程语言，可以随意换行，加任意个空格")]),l("li",null,"构造函数无法被直接调用，在对象初始化时被调用"),l("li",null,"构造函数可以有很多个——overloading 重载（同名，但返回值和参数不同）")],-1),P=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1631694025240-86c93246-6133-49da-9f02-2e6d0a9a98b9.png#clientId=ud2bbbb6e-dbc9-4&from=paste&height=328&id=u975fcf1a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=656&originWidth=1159&originalType=binary&ratio=1&size=200935&status=done&style=none&taskId=u02c8a2ef-6c41-4720-a236-2a896525180&width=580",alt:""})],-1),M=l("blockquote",null,[l("p",null,"Q：为什么同一个名字的函数可以存在多个呢？编译器是如何知道要调用哪一个的呢？ A：在编译的时候，编译器会将函数的返回值、参数等编码，和函数名组成一个新的名称，所以 overload 的 function 在编译器中的名字是不同的，不存在两个名称相同的函数；但图中黄色部分的重载是不行的，因为不写对象初始化参数时，两个函数都可以被调用，编译器不知道调用哪个，就会报错")],-1),$=l("ul",null,[l("li",null,"将构造函数写在 private 里，如单例模式")],-1),Q=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"A"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#676E95","font-style":"italic"}}," //Singleton 单例模式")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"static"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"A"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"getInstance"),l("span",{style:{color:"#89DDFF"}},"();")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"setup"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"private"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"A"),l("span",{style:{color:"#89DDFF"}},"();")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"A"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"A"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"rhs"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#FFCB6B"}},"A"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"A"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#82AAFF"}},"getInstance"),l("span",{style:{color:"#89DDFF"}},"(){")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"static"),l("span",{style:{color:"#F07178"}}," A a"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," a"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"})])])],-1),N={id:"三、参数传递与返回值",tabindex:"-1"},V={id:"_1-const-member-function（常量成员函数）",tabindex:"-1"},Y=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1631693943725-fe794147-1bb8-496b-a9a0-49f9806c4d0a.png#clientId=ud2bbbb6e-dbc9-4&from=paste&height=328&id=u6447840f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=656&originWidth=1165&originalType=binary&ratio=1&size=160432&status=done&style=none&taskId=u3c13f2b4-4911-4528-87e3-2b02d5dcf4c&width=583",alt:""})],-1),Z=l("ul",null,[l("li",null,[l("strong",null,"不改变数据的函数一定要加 const"),s("，比如只是拿数据出来打印的函数")])],-1),R=l("blockquote",null,[l("p",null,"Q：why？ A：如果变量或对象前加 const，则对象或变量的内容是不可改的。如上图所示，如果对象前加了 const 是无法调用对象非 const 成员函数的，因为不加 const 的成员函数在编译器看来就意味着可能改变对象的值，所以就会报错。")],-1),G={id:"_2-pass-by-value-vs-pass-by-reference（to-const-参数传递",tabindex:"-1"},J=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1631694253657-ab074b78-4fc5-4686-b665-905c13f9dacf.png#clientId=ud2bbbb6e-dbc9-4&from=paste&height=329&id=u3405916d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=657&originWidth=1146&originalType=binary&ratio=1&size=177459&status=done&style=none&taskId=u5b1e43ef-4652-4795-8695-a4effbccc86&width=573",alt:""})],-1),U=l("ul",null,[l("li",null,"pass by value，整包传过去。如上图 double，把值传过去，double 是四个字节，传递的参数也是四个字节，如果要传的参数是一百个字节那就传一百个字节。传参会占用堆栈空间，所以 C 里面就可以使用指针的形式来传递参数，一百个字节的参数只需要传递四个字节的地址就可以了。"),l("li",null,[s("pass by reference，通过引用传递。如上图 ostream&，引用的底层是指针，但是外在表现得更漂亮，引用传递和指针一样快，就是传递指针的速度，"),l("strong",null,"尽量所有的参数传递都传引用，四个字节以上的参数都应该传引用，double 也可以传引用"),s("。")]),l("li",null,"pass by reference to const，通过不可修改的引用传递。因为引用实际上还是指针，所以如果函数把传入的参数改了，那么原来的数据也会受到影响，所以为了防止函数更改数据，要给引用加上 const，意味引用指向的数据不可以更改。")],-1),X={id:"_3-return-by-value-vs-return-by-reference（to-const-返回值传递",tabindex:"-1"},K=l("ul",null,[l("li",null,"如果可以的情况下，返回值也应该用引用传递"),l("li",null,"当静态创建的空间随着函数结束而释放时，是无法返回引用的，只能返回值")],-1),ll={id:"_4-friend（友元）",tabindex:"-1"},sl=l("ul",null,[l("li",null,"友元函数不属于类的成员函数，但友元函数可以来拿（访问）类中的 private 数据"),l("li",null,"不要用太多的 friend，因为这样会打破 C++封装的特性，可以通过类中的其他成员函数来拿类的 private 数据，虽然这样会慢一点")],-1),el={id:"_5-相同-class-的各个-objects-互为-friends-友元",tabindex:"-1"},ol=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1631694098500-2e1b5749-fe78-4789-81ec-89694bf42125.png#clientId=ud2bbbb6e-dbc9-4&from=paste&height=320&id=ub221afdf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=639&originWidth=1158&originalType=binary&ratio=1&size=120920&status=done&style=none&taskId=u191ad8c0-00b8-43a6-99f5-32bf343dd17&width=579",alt:""})],-1),nl={id:"四、操作符重载与临时对象",tabindex:"-1"},tl={id:"_1-operator-overloading-1（双目操作符重载，by-成员函数）",tabindex:"-1"},al=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1631697244419-0807f082-eff1-4e39-bfe4-db1857c4d370.png#clientId=ud2bbbb6e-dbc9-4&from=paste&height=319&id=u1606fb9a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=638&originWidth=1148&originalType=binary&ratio=1&size=158719&status=done&style=none&taskId=u85e6bad8-e4c5-49e0-b6f4-576958d7cfe&width=574",alt:""})],-1),cl=l("ul",null,[l("li",null,"类中每个成员函数都有一个隐藏的参数 this，一般在函数参数列表的首位（位置与编译器有关）"),l("li",null,"C++使用操作符时，相当于调用左操作数的重载函数，即 c2.operator+=(c1);"),l("li",null,"assignment plus，+=")],-1),rl={id:"_2-return-by-reference-语法分析",tabindex:"-1"},pl={id:"",tabindex:"-1"},il=l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1631698197778-2151fdb5-12dd-4c8a-96b9-a75e82d9e5cd.png#clientId=ud2bbbb6e-dbc9-4&from=paste&height=328&id=ud3e91aed&margin=%5Bobject%20Object%5D&name=image.png&originHeight=655&originWidth=1142&originalType=binary&ratio=1&size=152491&status=done&style=none&taskId=u1b7ba14e-0d18-4a16-8e81-41363bcaa1f&width=571",alt:""},null,-1),yl=l("blockquote",null,[l("p",null,"Q：传引用和传指针都是四个字节，为什么参数传递时使用传引用而不是传指针呢？ A：因为传引用的话，传递者不需要知道接受者是以 reference 的形式接收，这样的话就可以直接 return 对象，而传指针的话，就必须 return 对象的指针，这样就无法实现连续的+=了。如果不是为了实现连续的+=，重载函数其实可以不要返回值，直接用 void 就行了")],-1),Fl={id:"_3-operator-overloading-2（双目操作符重载，by-非成员函数）",tabindex:"-1"},Dl=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"//complex c1,c2,c3")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"inline"),l("span",{style:{color:"#A6ACCD"}}," complex"),l("span",{style:{color:"#676E95","font-style":"italic"}},"         //c2 = c1 + c3")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F78C6C"}},"operator"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"+"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"x"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"y"),l("span",{style:{color:"#89DDFF"}},")")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"  "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"complex"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#82AAFF"}},"real"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"x"),l("span",{style:{color:"#89DDFF"}},")"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"+"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"real"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"y"),l("span",{style:{color:"#89DDFF"}},"),"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"imag"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"x"),l("span",{style:{color:"#89DDFF"}},")"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"+"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"imag"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"y"),l("span",{style:{color:"#89DDFF"}},"));")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"inline"),l("span",{style:{color:"#A6ACCD"}}," complex"),l("span",{style:{color:"#676E95","font-style":"italic"}},"         //c2 = c1 + 5")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F78C6C"}},"operator"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"+"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"x"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#C792EA"}},"double"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"y"),l("span",{style:{color:"#89DDFF"}},")")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"  "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"complex"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#82AAFF"}},"real"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"x"),l("span",{style:{color:"#89DDFF"}},")"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"+"),l("span",{style:{color:"#A6ACCD"}}," y"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"imag"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"x"),l("span",{style:{color:"#89DDFF"}},"));")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"inline"),l("span",{style:{color:"#A6ACCD"}}," complex")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F78C6C"}},"operator"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"+"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"double"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"x"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"y"),l("span",{style:{color:"#89DDFF"}},")"),l("span",{style:{color:"#676E95","font-style":"italic"}},"   //c2 = 7 + c1")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"  "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"complex"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"x "),l("span",{style:{color:"#89DDFF"}},"+"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"real"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"y"),l("span",{style:{color:"#89DDFF"}},"),"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"imag"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"y"),l("span",{style:{color:"#89DDFF"}},"));")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"})])])],-1),dl=l("ul",null,[l("li",null,"对于如果操作符没有对应的成员函数重载，则查看对应的非成员函数重载"),l("li",null,"使用非成员函数进行 overload 则无法使用默认隐藏的 this，故参数有两个"),l("li",null,"如果非成员函数 overload 想直接访问类的 private 数据则应该将其添加为 friend")],-1),hl=l("blockquote",null,[l("p",null,"Q：为什么这里的 return 不 return 引用呢？ A：+不同于+=，+=会改变左操作数自己，而 + 不会，所以这里不能使用引用而因以 const complex&来传递进来参数，返回值自然也就只能使用值传递。+所得的值，必定是一个 local object，是之前不存在的，只能在函数里初始化，只能进行值传递。如果是=的话，则应该改变左 操作数，并 return 一个引用")],-1),ul={id:"_4-temp-object（临时对象，-typename（）-）",tabindex:"-1"},Al=l("ul",null,[l("li",null,"上一个代码块中可以看到 return 后跟的是一个类似于创建 complex 对象的写法，这就是临时对象"),l("li",null,[s('临时对象的写法是"typename()",创建一个临时的、无名的、'),l("strong",null,"下一行结束生命周期"),s("的临时变量。")])],-1),Cl={id:"_5-operator-overloading-3（单目运算符重载，非成员函数）",tabindex:"-1"},_l=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"inline"),l("span",{style:{color:"#A6ACCD"}}," complex")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F78C6C"}},"operator"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"+"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"x"),l("span",{style:{color:"#89DDFF"}},")"),l("span",{style:{color:"#676E95","font-style":"italic"}},"    //正号")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"  "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#A6ACCD"}}," x"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"inline"),l("span",{style:{color:"#A6ACCD"}}," complex")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F78C6C"}},"operator"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"-"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"x"),l("span",{style:{color:"#89DDFF"}},")"),l("span",{style:{color:"#676E95","font-style":"italic"}},"    //负号")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"  "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"complex"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"(-"),l("span",{style:{color:"#82AAFF"}},"real"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"x"),l("span",{style:{color:"#89DDFF"}},"),"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"-"),l("span",{style:{color:"#82AAFF"}},"imag"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"x"),l("span",{style:{color:"#89DDFF"}},"));")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"})])])],-1),gl=l("ul",null,[l("li",null,"负号是产生了一个新的数，是 local object，所以 return by value"),l("li",null,'单目运算符如+、-，左边没有操作数，"+c1"在 C++中相当于调用全局函数 operator+(c1)'),l("li",null,'任何一个操作符重载都可以写成成员函数或非成员函数的形式，不一定就哪种实现一定好，除了"<<"')],-1),bl={id:"_6-operator-overloading-4-双目运算符重载，非成员函数",tabindex:"-1"},ml=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1631714274558-cb3885cc-2b01-4b1f-ad43-70960d97e7f0.png#clientId=u64b04058-2de4-4&from=paste&height=323&id=uf39e6891&margin=%5Bobject%20Object%5D&name=image.png&originHeight=645&originWidth=1192&originalType=binary&ratio=1&size=188664&status=done&style=none&taskId=u0523cd7f-0f7b-4d85-9c40-7635ddaab48&width=596",alt:""})],-1),fl=l("ul",null,[l("li",null,"双目运算符进行运算时，编译器调用左操作数的 overloading function，故我们要对 cout 进行重载"),l("li",null,"cout 的类 ostream 封装在标准库文件中，不应该被改动，故使用非成员函数对<<进行重载")],-1),vl=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#FFCB6B"}},"ostream"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#F78C6C"}},"operator"),l("span",{style:{color:"#FFCB6B"}},"<<"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#FFCB6B"}},"ostream"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"os"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"x"),l("span",{style:{color:"#89DDFF"}},")")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"//首先考虑能不能用引用传递，可以")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"//其次考虑会不会改 os，会，不可使用 const")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"//为了连续<<且非 local object 返回值，故返回引用且不能加 const")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#A6ACCD"}}," os "),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"'"),l("span",{style:{color:"#C3E88D"}},"("),l("span",{style:{color:"#89DDFF"}},"'"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"real"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"x"),l("span",{style:{color:"#89DDFF"}},")"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"'"),l("span",{style:{color:"#C3E88D"}},","),l("span",{style:{color:"#89DDFF"}},"'")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"           "),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"imag"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"x"),l("span",{style:{color:"#89DDFF"}},")"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"'"),l("span",{style:{color:"#C3E88D"}},")"),l("span",{style:{color:"#89DDFF"}},"'"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"})])])],-1),El={id:"总结",tabindex:"-1"},Bl={id:"_1-所有的数据放在-private-里",tabindex:"-1"},kl={id:"_2-使用初始化列表来初始化对象",tabindex:"-1"},xl={id:"_3-所有大于四字节的参数传递都用引用，除了-local-object",tabindex:"-1"},jl={id:"_4-所有不想被修改的地方都要加-const",tabindex:"-1"},Il={id:"class-with-pointer-members",tabindex:"-1"},wl={id:"五、三大函数：拷贝构造，拷贝复制，析构",tabindex:"-1"},Sl={id:"_1-implement-a-class-with-pointer-members-string-h",tabindex:"-1"},Tl=l("ul",null,[l("li",null,"构造函数，拷贝构造函数，拷贝复制函数，析构函数，编译器会默认给一套")],-1),ql=l("blockquote",null,[l("p",null,"Q：默认的一套有什么坏处？ A：默认的一套只是简单的将值复制了一份，如果 Class 中含有指针，那么得到的指针所指向的位置也是相同的，当其中一个对象释放掉之后，另一个指针就会报错。所以对于 Class With Pointer Members，我们需要自己写重写拷贝构造函数")],-1),zl=l("ul",null,[l("li",null,"string 类的数据成员应该是一个指向字符串的指针，这样方便动态的创建不同大小的 string，如果是固定的数组，则会造成空间的浪费"),l("li",null,"在 32 位的环境下，一个指针是 4 个 bytes")],-1),Ol={id:"_2-big-three（三个特殊函数）",tabindex:"-1"},Hl=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"string"),l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"string"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"char"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"*"),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"p"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#F78C6C"}},"0"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"string"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"string"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"s"),l("span",{style:{color:"#89DDFF"}},");"),l("span",{style:{color:"#676E95","font-style":"italic"}},"    //拷贝构造函数")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#FFCB6B"}},"string"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#F78C6C"}},"operator"),l("span",{style:{color:"#FFCB6B"}},"="),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"string"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"x"),l("span",{style:{color:"#89DDFF"}},");"),l("span",{style:{color:"#676E95","font-style":"italic"}},"  //拷贝复制函数")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"~string"),l("span",{style:{color:"#89DDFF"}},"();"),l("span",{style:{color:"#676E95","font-style":"italic"}},"        //析构函数，离开作用域时被调用")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"char*"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"get_c_char"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," ptr"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}"),l("span",{style:{color:"#676E95","font-style":"italic"}}," //方便丢进 cout")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"private"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"char"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"*"),l("span",{style:{color:"#F07178"}}," ptr"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"};")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"inline"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"string"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#82AAFF"}},"string"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#C792EA"}},"char"),l("span",{style:{color:"#89DDFF"}},"*"),l("span",{style:{color:"#A6ACCD"}}," p "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#F78C6C"}},"0"),l("span",{style:{color:"#89DDFF"}},"){")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"if"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#F07178"}},"p"),l("span",{style:{color:"#89DDFF"}},"){")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"     ptr "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"new"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"char"),l("span",{style:{color:"#89DDFF"}},"["),l("span",{style:{color:"#82AAFF"}},"strlen"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#F07178"}},"p"),l("span",{style:{color:"#89DDFF"}},")+"),l("span",{style:{color:"#F78C6C"}},"1"),l("span",{style:{color:"#89DDFF"}},"];")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"        "),l("span",{style:{color:"#82AAFF"}},"strcpy"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#F07178"}},"ptr"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#F07178"}},"p"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#89DDFF"}},"}"),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"else"),l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"     ptr "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"new"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"char"),l("span",{style:{color:"#89DDFF"}},"["),l("span",{style:{color:"#F78C6C"}},"1"),l("span",{style:{color:"#89DDFF"}},"];")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"        "),l("span",{style:{color:"#89DDFF"}},"*"),l("span",{style:{color:"#F07178"}},"ptr "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"'"),l("span",{style:{color:"#A6ACCD"}},"\\0"),l("span",{style:{color:"#89DDFF"}},"'")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"inline"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"string"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#A6ACCD"}}," string"),l("span",{style:{color:"#89DDFF"}},"&"),l("span",{style:{color:"#A6ACCD"}}," s"),l("span",{style:{color:"#89DDFF"}},"){")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    ptr "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"new"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"char"),l("span",{style:{color:"#89DDFF"}},"["),l("span",{style:{color:"#82AAFF"}},"strlen"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"s"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#A6ACCD"}},"ptr"),l("span",{style:{color:"#89DDFF"}},")+"),l("span",{style:{color:"#F78C6C"}},"1"),l("span",{style:{color:"#89DDFF"}},"];"),l("span",{style:{color:"#676E95","font-style":"italic"}}," //相同 class 的成员函数互为 friend")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"strcpy"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#F07178"}},"ptr"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#A6ACCD"}},"s"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#A6ACCD"}},"ptr"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"inline"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"string"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"string"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#F78C6C"}},"operator"),l("span",{style:{color:"#FFCB6B"}},"="),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"string"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"x"),l("span",{style:{color:"#89DDFF"}},"){"),l("span",{style:{color:"#676E95","font-style":"italic"}},"  //拷贝复制函数")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"if"),l("span",{style:{color:"#89DDFF"}},"(this"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"=="),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"&"),l("span",{style:{color:"#A6ACCD"}},"x"),l("span",{style:{color:"#89DDFF"}},")")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"        "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"*this;"),l("span",{style:{color:"#676E95","font-style":"italic"}},"     //防止自我赋值")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"    "),l("span",{style:{color:"#89DDFF"}},"delete[]"),l("span",{style:{color:"#A6ACCD"}}," ptr"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}}," ptr "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"new"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#C792EA"}},"char"),l("span",{style:{color:"#89DDFF"}},"["),l("span",{style:{color:"#82AAFF"}},"strlen"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"x"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#A6ACCD"}},"ptr"),l("span",{style:{color:"#89DDFF"}},")+"),l("span",{style:{color:"#F78C6C"}},"1"),l("span",{style:{color:"#89DDFF"}},"];")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"    "),l("span",{style:{color:"#82AAFF"}},"strcpy"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"ptr"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#A6ACCD"}},"x"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#A6ACCD"}},"ptr"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"    "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"*this;")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"inline"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"string"),l("span",{style:{color:"#89DDFF"}},"::~"),l("span",{style:{color:"#82AAFF"}},"string"),l("span",{style:{color:"#89DDFF"}},"(){")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"delete[]"),l("span",{style:{color:"#F07178"}}," ptr"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"})])])],-1),Wl=l("ul",null,[l("li",null,[s("const T "),l("em",null,"不能赋值给 T"),s("，因为这样 const 就失去了意义")]),l("li",null,"字符串自 C 语言以来的概念：即一个指向一个字符数组的指针，这个数组最末尾是'\\0'"),l("li",null,"另外有得到两种字符串长度的设计方式，一个是在最末尾加'\\0'，一个是在最开头加字符串长度"),l("li",null,"动态分配的内存要用 delete 手动释放，如果一个指针离开作用域后不 delete 掉就会发生内存泄漏，泄露的内存没有指针指向它"),l("li",null,"深拷贝和浅拷贝，浅拷贝拷贝地址，深拷贝拷贝地址里的内容"),l("li",null,"strcpy(a,b)，将指针 b 的内容拷贝到指针 a 指向的空间，需要 a 指向的空间足够容纳 b 指向的内容"),l("li",null,"T&，&表示 reference；&object，&表示取地址")],-1),Ll={id:"六、堆，栈与内存管理",tabindex:"-1"},Pl={id:"_0-size-of-variables",tabindex:"-1"},Ml=l("ul",null,[l("li",null,[l("p",null,[s("In "),l("strong",null,"32bit"),s("，"),l("strong",null,"char"),s("："),l("strong",null,"1bytes"),s("； "),l("strong",null,"short"),s("："),l("strong",null,"2bytes"),s("； "),l("strong",null,"int、float、long、adress"),s("："),l("strong",null,"4bytes"),s("；"),l("strong",null,"double"),s("："),l("strong",null,"8bytes")])]),l("li",null,[l("p",null,[s("In "),l("strong",null,"64bit"),s("，"),l("strong",null,"char"),s("："),l("strong",null,"1bytes"),s("； "),l("strong",null,"short"),s("："),l("strong",null,"2bytes"),s("；"),l("strong",null,"int、float"),s("："),l("strong",null,"4bytes"),s("；"),l("strong",null,"double、long、adress"),s("："),l("strong",null,"8bytes")])])],-1),$l={id:"_1-stack（栈）",tabindex:"-1"},Ql=l("ul",null,[l("li",null,"存在于作用域（scope）的一块内存空间（memory space）"),l("li",null,"当你调用函数，函数本身即会形成一个 stack 用来存放它所接收的参数，以及返回地址，在函数本体（function body）内声明的任何变量，其所使用的内存块都取自上述 stack，离开作用域自动释放。")],-1),Nl={id:"_2-heap（堆）",tabindex:"-1"},Vl=l("ul",null,[l("li",null,"又名 system heap，是指由操作系统提供的一块 global 内存空间，程序可动态分配（dynamic allocated）从中获得若干区块，需要手动释放。")],-1),Yl={id:"_3-stack-object-static-local-objects-global-objects-heap-objects",tabindex:"-1"},Zl=l("ul",null,[l("li",null,"Stack Object 在 scope 内定义，scope 结束自动释放"),l("li",null,"Static local objects 在 scope 内定义，其生命在 scope 结束之后仍然存在，直到整个程序结束"),l("li",null,"Global objects 在 scope 外定义，其生命在直到整个程序结束，其作用域是整个程序"),l("li",null,"Heap objects 程序动态分配，需要手动释放")],-1),Rl={id:"_4-new-先分配内存，再调用-ctor",tabindex:"-1"},Gl=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632124871450-0cc3791a-121f-44b1-b401-738081ac930b.png#clientId=uc4ec6e16-ea0e-4&from=paste&height=309&id=u6a15ca37&margin=%5Bobject%20Object%5D&name=image.png&originHeight=618&originWidth=1152&originalType=binary&ratio=1&size=175965&status=done&style=none&taskId=uf59e93f8-0b82-4649-b37a-b16911fa04f&width=576",alt:""})],-1),Jl={id:"_5-delete-先调用-dtor，再释放内存",tabindex:"-1"},Ul=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632125029610-c45a255a-3654-49d9-ab2a-45f1f99d044c.png#clientId=uc4ec6e16-ea0e-4&from=paste&height=308&id=ufb4a6f71&margin=%5Bobject%20Object%5D&name=image.png&originHeight=616&originWidth=1124&originalType=binary&ratio=1&size=150198&status=done&style=none&taskId=u11f69456-ad00-41dd-b3a5-5d48c96079c&width=562",alt:""}),l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632125566107-fcc584dc-674e-4a66-b47b-b2a4b2b4f1c5.png#clientId=uc4ec6e16-ea0e-4&from=paste&height=317&id=u666f4c3b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=633&originWidth=1153&originalType=binary&ratio=1&size=145889&status=done&style=none&taskId=ued78c2f9-ff80-4090-a595-d2e30830376&width=577",alt:""})],-1),Xl={id:"_6-内存分配",tabindex:"-1"},Kl=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632128542854-36d58382-2346-47bf-93bc-a145b0b422cf.png#clientId=uc4ec6e16-ea0e-4&from=paste&height=313&id=u36d94b71&margin=%5Bobject%20Object%5D&name=image.png&originHeight=625&originWidth=1130&originalType=binary&ratio=1&size=158475&status=done&style=none&taskId=u096a37ac-f8f2-406f-9045-e9c915d01d1&width=565",alt:""})],-1),ls=l("ul",null,[l("li",null,"红色部分是 cookie，灰色部分是 debug header，绿色部分是数据占用空间，蓝色部分是填充空间"),l("li",null,"内存的分配需要是 16 的倍数，单位 bytes"),l("li",null,"cookie 是用于告诉系统需要回收的空间的大小，如第一列，共 64 个 byte，64 在十六进制下是 40H，因为内存分配的大小为 16 的倍数，所以后四位一定是 0000，这样就可以借用最后一个 bit 来表示这块空间是给出去还是收回来，1 表示把这块空间给程序了，程序获得了这块空间")],-1),ss={id:"_7-array-new-一定要搭配-array-delete",tabindex:"-1"},es=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632129817534-514b8219-ccdb-49f3-8322-8f2380f24b05.png#clientId=uc4ec6e16-ea0e-4&from=paste&height=322&id=u48ab13a9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=643&originWidth=1126&originalType=binary&ratio=1&size=170585&status=done&style=none&taskId=u6bdf7eb0-f9ee-465f-84fb-f3e6ae173e4&width=563",alt:""})],-1),os=l("blockquote",null,[l("p",null,[s("Q：为什么是 (8"),l("em",null,"3)+(32 + 4)+ (4"),s("2)+"),l("strong",null,"4"),s("? A：这里的最后一个 4 是用来表示数组的长度 (VC 下)")])],-1),ns={id:"-1",tabindex:"-1"},ts=l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632130387466-7cafdcfd-9941-4bb9-95c5-f35daa26b40f.png#clientId=uc4ec6e16-ea0e-4&from=paste&height=317&id=ue26ea069&margin=%5Bobject%20Object%5D&name=image.png&originHeight=633&originWidth=1128&originalType=binary&ratio=1&size=112086&status=done&style=none&taskId=u8cac8b7e-08cd-410f-8954-6d8b2bc4d91&width=564",alt:""},null,-1),as=l("ul",null,[l("li",null,"delete 先调用析构，再删除空间，使用 delete 释放 new [ ]，发生内存泄漏的不是 delete 的指针指向的空间，而是 new 的类数组里，后面的 class 的指针成员指向的空间"),l("li",null,"so，如果 new [ ]创建的是 class without pointer member，则使用 delete 释放并不会造成内存泄漏，虽然不会，但也不要这样写，要养成好习惯。")],-1),cs={id:"七、扩展补充：类模板，函数模板，及其他",tabindex:"-1"},rs={id:"_1-static",tabindex:"-1"},ps=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632137497740-89b3ba6a-3e52-4a27-808d-1cb3f7725cef.png#clientId=u79e84378-3761-4&from=paste&height=336&id=ue97bc16d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=671&originWidth=1262&originalType=binary&ratio=1&size=206514&status=done&style=none&taskId=u6c0c22a2-d181-45b7-b8bf-c4df67f6c48&width=631",alt:""})],-1),is=l("ul",null,[l("li",null,"上图黄色部分可写可不写，不写编译器会自动帮你加上去"),l("li",null,"关于 this point，所有的成员函数都有一个缺省的参数 T* this；所以在类调用自己成员函数时，也可以这样理解：")],-1),ys=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#89DDFF","font-style":"italic"}},"#include"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"<"),l("span",{style:{color:"#C3E88D"}},"iostream"),l("span",{style:{color:"#89DDFF"}},">")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF","font-style":"italic"}},"#include"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},'"'),l("span",{style:{color:"#C3E88D"}},"complex.h"),l("span",{style:{color:"#89DDFF"}},'"')]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"complex c1"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#A6ACCD"}},"c2")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#FFCB6B"}},"std"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#A6ACCD"}},"cout"),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#A6ACCD"}},"c1"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#82AAFF"}},"real"),l("span",{style:{color:"#89DDFF"}},"();")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#FFCB6B"}},"std"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#A6ACCD"}},"cout"),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#A6ACCD"}},"c2"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#82AAFF"}},"real"),l("span",{style:{color:"#89DDFF"}},"();")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#FFCB6B"}},"std"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#A6ACCD"}},"cout"),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#82AAFF"}},"real"),l("span",{style:{color:"#89DDFF"}},"(&"),l("span",{style:{color:"#A6ACCD"}},"c1"),l("span",{style:{color:"#89DDFF"}},");"),l("span",{style:{color:"#676E95","font-style":"italic"}},"   //this pointer 的原理")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#FFCB6B"}},"std"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#A6ACCD"}},"cout"),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#FFCB6B"}},"complex"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#82AAFF"}},"real"),l("span",{style:{color:"#89DDFF"}},"(&"),l("span",{style:{color:"#A6ACCD"}},"c2"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"})])])],-1),Fs=l("blockquote",null,[l("p",null,"Q：为什么成员函数只有一份，而且成员函数没有参数也可以处理不同的数据呢？ A：因为缺省的 this pointer 的存在，object 在调用 member function 时，会将自己的指针传入 member function")],-1),Ds=l("ul",null,[l("li",null,"Static data members 和 Static function members 只有一份；")],-1),ds=l("p",null,"Static data members 应用：银行 1000w 客户，存款是 data member，利率是 static data member Static function members 应用：处理静态数据",-1),hs=l("blockquote",null,[l("p",null,'Q：" Static function members 应用：处理静态数据 " Why？ A：静态成员函数与普通成员函数的区别就是它没有 this pointer 的参数，所以它不能针对性地访问不同 object 的不同数据，它的任务就是处理 Static data members')],-1),us=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"Account"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#A6ACCD"}},"h")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"Account"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#676E95","font-style":"italic"}},"     //class 声明")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"static"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"double"),l("span",{style:{color:"#F07178"}}," m_rate"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#676E95","font-style":"italic"}},"   //static data member 声明")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"static"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"void"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"set_rate"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"double&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"x"),l("span",{style:{color:"#89DDFF"}},")"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," m_rate "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," x"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"};")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"double"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"Account"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#A6ACCD"}},"m_rate "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#F78C6C"}},"8.0"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#676E95","font-style":"italic"}},"  //static data member 需要在类外定义，给不给初值都可以")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"main"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#A6ACCD"}},"cpp")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"int"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"main"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#676E95","font-style":"italic"}},"    //調用 static 函數的方式有二：")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#FFCB6B"}},"Account"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#82AAFF"}},"set_rate"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#F78C6C"}},"5.0"),l("span",{style:{color:"#89DDFF"}},");"),l("span",{style:{color:"#676E95","font-style":"italic"}},"  //通過 class name 調用，不需要初始化对象就可以调用")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"Account a"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"a"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#82AAFF"}},"set_rate"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#F78C6C"}},"7.0"),l("span",{style:{color:"#89DDFF"}},");"),l("span",{style:{color:"#676E95","font-style":"italic"}},"    //通過 object 調用")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"})])])],-1),As=l("ul",null,[l("li",null,"让变量获得内存的这一行叫定义")],-1),Cs=l("p",null,"​",-1),_s={id:"_2-把-ctors-放在-private-里",tabindex:"-1"},gs=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"Singleton"),l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"static"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"Singleton"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"getSingleton"),l("span",{style:{color:"#89DDFF"}},"(){")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"        "),l("span",{style:{color:"#C792EA"}},"static"),l("span",{style:{color:"#F07178"}}," Singleton a"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"        renturn a"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"private"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"Singleton"),l("span",{style:{color:"#89DDFF"}},"(){}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"static"),l("span",{style:{color:"#F07178"}}," Singleton a"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"};")]),s(`
`),l("span",{class:"line"})])])],-1),bs=l("p",null,"这种写法是一种设计模式，单例模式（singleton mode），上面已经提到过了，这里要注意的是 static 的用法",-1),ms=l("blockquote",null,[l("p",null,'Q：为什么 static function members 里直接声明了一个局部变量还返回了它的引用？如果函数结束后，static 局部变量没有释放的话，那下一次调用该函数时不会重复定义吗？ A：" static singleton a；"中的 static 继承的是 C 语言的特性，在 C 语言中，static 有两个作用，对其他文件隐藏该文件的 static 全局变量 和 延长局部变量的生存周期。在第二种用法中，static 声明的局部变量只在语句第一次运行时被初始化，之后的"static singleton a；"都不会执行，此外 static 变量的生存周期与文件相同，随程序结束而被释放。')],-1),fs=l("p",null,"static 在 cpp 中还有第三种用法，那就是在类中使用，保证静态数据成员和函数成员的唯一性 ​",-1),vs={id:"_3-namespace",tabindex:"-1"},Es=l("ul",null,[l("li",null,"namespace std{...} ，包装的一种策略，可以用于防止重名")],-1),Bs=l("p",null,"​",-1),ks={id:"_4-template",tabindex:"-1"},xs=l("p",null,"函数模板和类模板的一个区别，类模板在创建对象时需要声明对象的类型，而函数模板不需要，编译器会根据函数的参数自动推导使用的类型",-1),js={id:"_5-more-details",tabindex:"-1"},Is=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632365406071-346298ab-9d5a-4af3-80fc-5760039395dd.png#clientId=u5f81c45f-76d6-4&from=paste&height=349&id=ufb295f5e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=697&originWidth=1251&originalType=binary&ratio=1&size=210533&status=done&style=none&taskId=uf4c4fdd3-19d9-49a9-9668-d99bca4a6d3&width=626",alt:""})],-1),ws={id:"八、组合、委托与继承",tabindex:"-1"},Ss={id:"_1-composition（组合），表示-has-a",tabindex:"-1"},Ts=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"//adapter，将 deque 改装成 queue")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"template"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"<"),l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"T"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"Sequence"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#A6ACCD"}}," deque"),l("span",{style:{color:"#89DDFF"}},"<"),l("span",{style:{color:"#FFCB6B"}},"T"),l("span",{style:{color:"#89DDFF"}},">"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},">")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"queue"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"...")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"protected"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"Sequence c"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#676E95","font-style":"italic"}}," // 底層容器")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"// 以下完全利用 c 的操作函數完成")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"bool"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"empty"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD"}},"c"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#82AAFF"}},"empty"),l("span",{style:{color:"#89DDFF"}},"();"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#FFCB6B"}},"size_type"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"size"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD"}},"c"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#82AAFF"}},"size"),l("span",{style:{color:"#89DDFF"}},"();"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#FFCB6B"}},"reference"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"front"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD"}},"c"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#82AAFF"}},"front"),l("span",{style:{color:"#89DDFF"}},"();"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#FFCB6B"}},"reference"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"back"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD"}},"c"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#82AAFF"}},"back"),l("span",{style:{color:"#89DDFF"}},"();"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"// deque 是兩端可進出，queue 是末端進前端出（先進先出）")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"void"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"push"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"value_type"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"x"),l("span",{style:{color:"#89DDFF"}},")"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD"}},"c"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#82AAFF"}},"push_back"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#F07178"}},"x"),l("span",{style:{color:"#89DDFF"}},");"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"void"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"pop"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD"}},"c"),l("span",{style:{color:"#89DDFF"}},"."),l("span",{style:{color:"#82AAFF"}},"pop_front"),l("span",{style:{color:"#89DDFF"}},"();"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"};")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"})])])],-1),qs=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632366827613-28b25842-4f40-45cd-b0cb-2d3ce0e92bf1.png#clientId=u5f81c45f-76d6-4&from=paste&height=32&id=u894b7d9b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=63&originWidth=431&originalType=binary&ratio=1&size=9374&status=done&style=none&taskId=u515159a3-fe25-4d51-a53e-8c3d0018485&width=216",alt:""}),s("，queue has a deque")],-1),zs={id:"_2-composition-组合-关系中的构造和析构",tabindex:"-1"},Os=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632367849730-68020f4a-c61f-42bf-a10d-70bbf3dbf59b.png#clientId=u5f81c45f-76d6-4&from=paste&height=354&id=u15e21727&margin=%5Bobject%20Object%5D&name=image.png&originHeight=708&originWidth=1110&originalType=binary&ratio=1&size=196354&status=done&style=none&taskId=u2d468b2d-f6d6-4ee1-8e11-28b9d6c261d&width=555",alt:""})],-1),Hs={id:"_3-delegation（委托），composition-by-reference",tabindex:"-1"},Ws=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"// file String.hpp")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"StringRep"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"String"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#82AAFF"}},"String"),l("span",{style:{color:"#89DDFF"}},"();")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#82AAFF"}},"String"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"char*"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"s"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#82AAFF"}},"String"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"String"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"s"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#FFCB6B"}},"String"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F78C6C"}},"operator"),l("span",{style:{color:"#FFCB6B"}},"="),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"String"),l("span",{style:{color:"#C792EA"}},"&"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"s"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#82AAFF"}},"~String"),l("span",{style:{color:"#89DDFF"}},"();")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},". . . .")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"private"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"StringRep"),l("span",{style:{color:"#89DDFF"}},"*"),l("span",{style:{color:"#F07178"}}," rep"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#676E95","font-style":"italic"}}," // pimpl")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"};")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"// file String.cpp")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF","font-style":"italic"}},"#include"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},'"'),l("span",{style:{color:"#C3E88D"}},"String.hpp"),l("span",{style:{color:"#89DDFF"}},'"')]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"namespace"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"StringRep"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"friend"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"String"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#82AAFF"}},"StringRep"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"char*"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"s"),l("span",{style:{color:"#89DDFF"}},");")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#82AAFF"}},"~StringRep"),l("span",{style:{color:"#89DDFF"}},"();")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"int"),l("span",{style:{color:"#F07178"}}," count"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"char"),l("span",{style:{color:"#89DDFF"}},"*"),l("span",{style:{color:"#F07178"}}," rep"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"};")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#FFCB6B"}},"String"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#82AAFF"}},"String"),l("span",{style:{color:"#89DDFF"}},"(){"),l("span",{style:{color:"#F07178"}}," ... "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"})])])],-1),Ls=l("blockquote",null,[l("p",null,'Q: Why called "by reference"?not "by pointer"? A：学术上没有 by pointer 的说法，所以叫 by reference')],-1),Ps=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632373633259-f5ec82e9-8ced-4386-91f3-43babf60304a.png#clientId=u5f81c45f-76d6-4&from=paste&height=369&id=u610a9a78&margin=%5Bobject%20Object%5D&name=image.png&originHeight=738&originWidth=1284&originalType=binary&ratio=1&size=233007&status=done&style=none&taskId=u853a51ee-6100-47ff-8abb-4833c2cd768&width=642",alt:""})],-1),Ms=l("ul",null,[l("li",null,"Delegation 关系下，class with pointer 要注意重载拷贝构造、拷贝赋值和析构函数"),l("li",null,[s("以上的例子是一种非常经典的实现，called"),l("strong",null,"pimpl"),s("，pointer to implement，又称 handle/body（左边是手柄，右边是主体），一个指针指向为我实现所有功能的 class，body 可以随意变动，而不影响 handle 方，handle 方不用再编译，只需要 body 方编译，相当于编译防火墙。")]),l("li",null,"“reference counting ”and “copy on write ”")],-1),$s={id:"_4-inheritance（继承），表示-is-a",tabindex:"-1"},Qs=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"struct"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"_List_node_base")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"_List_node_base"),l("span",{style:{color:"#89DDFF"}},"*"),l("span",{style:{color:"#F07178"}}," _M_next"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"_List_node_base"),l("span",{style:{color:"#89DDFF"}},"*"),l("span",{style:{color:"#F07178"}}," _M_prev"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"};")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"template"),l("span",{style:{color:"#89DDFF"}},"<"),l("span",{style:{color:"#C792EA"}},"typename"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"_Tp"),l("span",{style:{color:"#89DDFF"}},">")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"struct"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"_List_node")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},": "),l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"_List_node_base"),l("span",{style:{color:"#676E95","font-style":"italic"}},"   //cpp 三种继承方式，public private protect")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"_Tp _M_data"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"};")]),s(`
`),l("span",{class:"line"})])])],-1),Ns=l("ul",null,[l("li",null,"子类 is a 父类，子类继承父类的数据成员（表现在内存上）和方法（表现在调用权上）")],-1),Vs={id:"_5-inheritance（继承）关系下的构造和析构",tabindex:"-1"},Ys=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632375141166-8f3fd1a0-5241-4340-863e-83beb0570922.png#clientId=u5f81c45f-76d6-4&from=paste&height=359&id=u851e0e43&margin=%5Bobject%20Object%5D&name=image.png&originHeight=717&originWidth=982&originalType=binary&ratio=1&size=196638&status=done&style=none&taskId=u060ddf3b-8d15-407c-8388-436116cc787&width=491",alt:""}),s(" 父类的 dtor 一定要是虚函数，这是为了防止内存泄漏，看下面的这种情况")],-1),Zs=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"Base")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"Base"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," mPtr "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"new"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"int"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"~Base"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"delete"),l("span",{style:{color:"#F07178"}}," mPtr"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#F07178"}}," cout"),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#89DDFF"}},'"'),l("span",{style:{color:"#C3E88D"}},"Base::Destruction"),l("span",{style:{color:"#89DDFF"}},'"'),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#F07178"}},"endl"),l("span",{style:{color:"#89DDFF"}},";}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"private"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"int"),l("span",{style:{color:"#89DDFF"}},"*"),l("span",{style:{color:"#F07178"}}," mPtr"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"Derived"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},":"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"Base")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"Derived"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," mDerived "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"new"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"long"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"~Derived"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"delete"),l("span",{style:{color:"#F07178"}}," mDerived"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#F07178"}}," cout"),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#89DDFF"}},'"'),l("span",{style:{color:"#C3E88D"}},"Derived::Destruction"),l("span",{style:{color:"#89DDFF"}},'"'),l("span",{style:{color:"#89DDFF"}},"<<"),l("span",{style:{color:"#F07178"}},"endl"),l("span",{style:{color:"#89DDFF"}},";}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"private"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"long"),l("span",{style:{color:"#89DDFF"}},"*"),l("span",{style:{color:"#F07178"}}," mDerived"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"void"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#82AAFF"}},"main"),l("span",{style:{color:"#89DDFF"}},"()")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"    Base"),l("span",{style:{color:"#89DDFF"}},"*"),l("span",{style:{color:"#A6ACCD"}}," p "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#89DDFF"}},"new"),l("span",{style:{color:"#A6ACCD"}}," Derived"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"    "),l("span",{style:{color:"#89DDFF"}},"delete"),l("span",{style:{color:"#A6ACCD"}}," p"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"})])])],-1),Rs=l("p",null,"以上代码会产生内存泄露，因为 new 出来的是 Derived 类资源，采用一个基类的指针来接收，析构的时候，编译器因为只是知道这个指针是基类的，所以只将基类部分的内存析构了，而不会析构子类的，就造成了内存泄露，如果将基类的析构函数改成虚函数，就可以避免这种情况，因为虚函数是后绑定，其实就是在虚函数列表中，析构函数将基类的析构函数用实际对象的一组析构函数替换掉了，也就是先执行子类的虚函数再执行父类的虚函数，这样子类的内存析构了，父类的内存也释放了，就不会产生内存泄露。",-1),Gs={id:"九、虚函数与多态",tabindex:"-1"},Js={id:"_1-三种虚函数",tabindex:"-1"},Us=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632375994834-b284bc0f-486f-423a-9f1a-a5031f82afba.png#clientId=u5f81c45f-76d6-4&from=paste&height=362&id=u57f5041a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=723&originWidth=1209&originalType=binary&ratio=1&size=244346&status=done&style=none&taskId=ucf2133bf-6383-41ec-9a09-20f44309313&width=605",alt:""})],-1),Xs=l("ul",null,[l("li",null,"non - virtual function：不希望 derived class override，同普通函数，若子类定义了父类的同名函数，那么父类函数在子类中会隐藏，父类指针指向的子类对象会调用父类函数，子类指针指向的子类对象会调用子类函数"),l("li",null,"virtual function：希望 derived class override，且 base class 已经有默认定义，虚函数通常的两种用法，模版方法和多态"),l("li",null,'pure virtual function：一定要 derived class override，base class 没有默认定义，后面要写"= 0"')],-1),Ks={id:"_2-derived-class-调用父类函数",tabindex:"-1"},le=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632377302332-d363ee92-ce96-4428-9949-7b5d8af9f004.png#clientId=u5f81c45f-76d6-4&from=paste&height=356&id=ua4008e4e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=712&originWidth=1124&originalType=binary&ratio=1&size=200606&status=done&style=none&taskId=u8ca28e47-d252-4c68-89e5-bba0ea7f610&width=562",alt:""})],-1),se=l("ul",null,[l("li",null,'CMyDoc 调用的父类的函数，通过 CDocument::OnFileOpen(&myDoc)；谁调用的传谁的 this pointer，函数则是 base class 的函数，其参数列表缺省的 this 指针的类型是 base 型，传入的 this 指针是指向子类的指针，所以函数内的 this->Serialize() 就是父类指针指向子类（向上转型）调用虚函数，符合动态绑定要求，运行时调用子类的函数。如果父类不加 virtual，就是静态绑定，编译时父类 OnFileOpen() 中的 Serialize() 就会变成"Call 父类 Serialize() 的地址"，就变成了调用父类的 Serialize()。'),l("li",null,[l("strong",null,"template method"),s("，设计模式之一，模板方法，延后实现，"),l("strong",null,"MFC"),s("就是使用的这种写法")])],-1),ee={id:"_3-inheritance-composition-关系下的-ctor-and-dtor",tabindex:"-1"},oe=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632380603219-c7223f7c-d905-4c8f-976c-585152354805.png#clientId=u5f81c45f-76d6-4&from=paste&height=371&id=u859072bc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=742&originWidth=1339&originalType=binary&ratio=1&size=240286&status=done&style=none&taskId=uc33c9ea2-3fbb-4316-8cac-e98ee4e7c4d&width=669.5",alt:""})],-1),ne={id:"十、委托相关设计",tabindex:"-1"},te={id:"_1-inhertance-delegation-composite-混合模式",tabindex:"-1"},ae=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632579859146-55173680-a9c0-40ab-ad86-6a742ee376bd.png#clientId=ufe8533c3-b85d-4&from=paste&height=318&id=u06cc1433&margin=%5Bobject%20Object%5D&name=image.png&originHeight=635&originWidth=1116&originalType=binary&ratio=1&size=179065&status=done&style=none&taskId=ub6898318-f9f7-4feb-8890-3618eb76670&width=558",alt:""})],-1),ce=l("ul",null,[l("li",null,"vector 容器里放的东西大小需要一致，所以放指针")],-1),re={id:"_2-inhertance-delegation-prototype-原型模式",tabindex:"-1"},pe=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632580389013-1b3a2c3a-1008-4383-a3d0-ab9e6ce73f80.png#clientId=ufe8533c3-b85d-4&from=paste&height=298&id=u045a8e09&margin=%5Bobject%20Object%5D&name=image.png&originHeight=596&originWidth=900&originalType=binary&ratio=1&size=165652&status=done&style=none&taskId=u0c4d3f37-6444-4c41-a203-f8c26b00533&width=450",alt:""})],-1),ie=l("ul",null,[l("li",null,"原型模式，提前做出一个子类对象"),l("li",null,"格式 name：type"),l("li",null,"这类图的下划线表示 static 量"),l("li",null,'"-"表示 private，"#"表示 protected，"+"表示 public（也可以不写）'),l("li",null,"函数的继承表现在调用权上")],-1),ye=l("div",{class:"language-cpp"},[l("span",{class:"copy"}),l("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"//Image.h")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"enum"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"imageType"),l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD"}},"LSAT"),l("span",{style:{color:"#89DDFF"}},","),l("span",{style:{color:"#A6ACCD"}},"SPOT")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"};")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"Image"),l("span",{style:{color:"#89DDFF"}},"{"),l("span",{style:{color:"#676E95","font-style":"italic"}},"     //目标，通过父类创建子类的对象，在不知道子类的存在的情况下")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"static"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"Image"),l("span",{style:{color:"#C792EA"}},"*"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"findAndClone"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#FFCB6B"}},"imageType"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"_imageType"),l("span",{style:{color:"#89DDFF"}},"){")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"     "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"for"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"int"),l("span",{style:{color:"#F07178"}}," i "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#F78C6C"}},"0"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#F07178"}},"i"),l("span",{style:{color:"#89DDFF"}},"<"),l("span",{style:{color:"#F07178"}},"_nextSlot"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#F07178"}},"i"),l("span",{style:{color:"#89DDFF"}},"++){")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"         "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"if"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#A6ACCD"}},"prototype"),l("span",{style:{color:"#89DDFF"}},"["),l("span",{style:{color:"#F07178"}},"i"),l("span",{style:{color:"#89DDFF"}},"]->"),l("span",{style:{color:"#82AAFF"}},"returnType"),l("span",{style:{color:"#89DDFF"}},"()=="),l("span",{style:{color:"#F07178"}},"_imageType"),l("span",{style:{color:"#89DDFF"}},")")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"             "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD"}},"prototype"),l("span",{style:{color:"#89DDFF"}},"["),l("span",{style:{color:"#F07178"}},"i"),l("span",{style:{color:"#89DDFF"}},"]->"),l("span",{style:{color:"#82AAFF"}},"clone"),l("span",{style:{color:"#89DDFF"}},"();")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"        "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"        "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"nullptr;")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#89DDFF"}},"};")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"protected"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"virtual"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"returnType"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#F78C6C"}},"0"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"virtual"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"clone"),l("span",{style:{color:"#89DDFF"}},"()"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"const"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#F78C6C"}},"0"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"static"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"voide"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"addPrototype"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#FFCB6B"}},"Image"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"*"),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"image"),l("span",{style:{color:"#89DDFF"}},"){"),l("span",{style:{color:"#A6ACCD"}},"prototype"),l("span",{style:{color:"#89DDFF"}},"["),l("span",{style:{color:"#F07178"}},"_nextSlot"),l("span",{style:{color:"#89DDFF"}},"++]"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}},"  image"),l("span",{style:{color:"#89DDFF"}},";}")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"private"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"static"),l("span",{style:{color:"#F07178"}}," Image "),l("span",{style:{color:"#89DDFF"}},"*"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD"}},"prototype"),l("span",{style:{color:"#89DDFF"}},"["),l("span",{style:{color:"#F78C6C"}},"10"),l("span",{style:{color:"#89DDFF"}},"];"),l("span",{style:{color:"#676E95","font-style":"italic"}},"  //存储子类对象的指针")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"static"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"int"),l("span",{style:{color:"#F07178"}}," _nextSlot"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"};")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#A6ACCD"}},"Image "),l("span",{style:{color:"#89DDFF"}},"*"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"Image"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#A6ACCD"}},"prototype"),l("span",{style:{color:"#89DDFF"}},"["),l("span",{style:{color:"#F78C6C"}},"10"),l("span",{style:{color:"#89DDFF"}},"];"),l("span",{style:{color:"#676E95","font-style":"italic"}},"   //static 类外定义")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"int"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"Image"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#A6ACCD"}},"_nextSlot"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"}),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#676E95","font-style":"italic"}},"//LandSatImage.h")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"class"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"LandSatImage"),l("span",{style:{color:"#89DDFF"}},":"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#FFCB6B"}},"Image"),l("span",{style:{color:"#89DDFF"}},"{")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"public"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#FFCB6B"}},"LandSatImage"),l("span",{style:{color:"#C792EA"}},"*"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"clone"),l("span",{style:{color:"#89DDFF"}},"(){")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"     "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#89DDFF"}},"new"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"LandSatImage"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#F78C6C"}},"1"),l("span",{style:{color:"#89DDFF"}},");"),l("span",{style:{color:"#676E95","font-style":"italic"}},"  //1，假参数")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#FFCB6B"}},"imageType"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#82AAFF"}},"returnType"),l("span",{style:{color:"#89DDFF"}},"(){")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"        "),l("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),l("span",{style:{color:"#F07178"}}," LSAT"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"protected"),l("span",{style:{color:"#89DDFF"}},":"),l("span",{style:{color:"#676E95","font-style":"italic"}},"         //允许子类访问，这里可能是希望子类的子类能继承这个_id 的增长")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"LandSatImage"),l("span",{style:{color:"#89DDFF"}},"("),l("span",{style:{color:"#C792EA"}},"int"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#A6ACCD","font-style":"italic"}},"dummy"),l("span",{style:{color:"#89DDFF"}},"){"),l("span",{style:{color:"#676E95","font-style":"italic"}},"   //dummy，假参数，仅为了实现重载")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"        _id "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#F07178"}}," _count"),l("span",{style:{color:"#89DDFF"}},"++;")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"private"),l("span",{style:{color:"#89DDFF"}},":")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#82AAFF"}},"LandSatImage"),l("span",{style:{color:"#89DDFF"}},"(){")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"     "),l("span",{style:{color:"#82AAFF"}},"addPrototype"),l("span",{style:{color:"#89DDFF"}},"(this);")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"static"),l("span",{style:{color:"#F07178"}}," LandSatImage _LandSatImage"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#676E95","font-style":"italic"}}," //不让外部轻易访问，只将访问的指针提供给父类")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"int"),l("span",{style:{color:"#F07178"}}," _id"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"    "),l("span",{style:{color:"#C792EA"}},"static"),l("span",{style:{color:"#F07178"}}," "),l("span",{style:{color:"#C792EA"}},"int"),l("span",{style:{color:"#F07178"}}," _count"),l("span",{style:{color:"#89DDFF"}},";"),l("span",{style:{color:"#676E95","font-style":"italic"}},"     //所有子类共享一个 static 数据成员，用于计数")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#89DDFF"}},"}")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F07178"}},"LandSatImage "),l("span",{style:{color:"#FFCB6B"}},"LandSatImage"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#F07178"}},"_LandSatImage"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"},[l("span",{style:{color:"#C792EA"}},"int"),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#FFCB6B"}},"LandSatImage"),l("span",{style:{color:"#89DDFF"}},"::"),l("span",{style:{color:"#A6ACCD"}},"_count "),l("span",{style:{color:"#89DDFF"}},"="),l("span",{style:{color:"#A6ACCD"}}," "),l("span",{style:{color:"#F78C6C"}},"1"),l("span",{style:{color:"#89DDFF"}},";")]),s(`
`),l("span",{class:"line"})])])],-1),Fe=l("p",null,"如果想要动态创建一个对象，需要用到 new typename() 的方式，而父类是不知道 typename 的，这个 typename 只有未来诞生的子类知道，所以只能由子类来 new 一个自己，那父类如何获得这个对象呢？ ​ 答案是子类 new 自己时，在构造函数中将自己的联系方式交给父类，所以父类里需要一个数组来存储子类对象的指针 prototype ,父类通过这个指针就可以访问到子类。 ​ 但是类的数据成员是没有多态的，子类继承的 prototype 数组是具有独立内存的，如果子类创建和父类同名的数据成员也会覆盖掉继承的父类的数据成员 (父类的数据成员仍然存在，但是需要用命名空间来 call)，所以子类如果想向父类的 prototype 添加内容，需要将父类的 protoytype 数组设为 static（当然了），static 数据成员在继承体系内独一份，子类父类共享。",-1),De=l("blockquote",null,[l("p",null,"static 数据成员不被子类继承，父类子类共享，private 下的 static 成员除外")],-1),de=l("p",null,"这样一来就可以将子类添加到父类里，父类中 prototype 是 private，所以需要提供给子类访问的接口，这个函数该怎么写呢？ ​ 首先它不需要是一个虚函数，因为所有子类进行的操作都一样，不需要多态；其次它仅仅只处理静态数据成员，所以最好是以个静态函数，这样的话，不需要创建对象也可以调用。那么这个函数就设计好了：",-1),he=l("p",null,[l("code",null,"static voide addPrototype(Image \\* image){prototype[_nextSlot++] = image;}")],-1),ue=l("blockquote",null,[l("p",null,"static 数据成员最好交给 static 成员函数来处理")],-1),Ae=l("p",null,"目前，我们实现了子类 new 自己时，会将自己交给父类，可是这与我们的目标父类创建未来的子类并不一致，这是未来的子类创建自己时，将自己交给父类。创建权在子类手里，父类并没有权力创建，但是既然父类拥有了子类的地址，那么这也不是件难事，只要子类给父类提供一个创建自己的接口就好了，接下来我们来设计这个函数。 ​ 首先每个子类的这个函数都不一样，因为每个子类的 new typename() 都不一样，所以需要多态，父类需要将这个函数设计成虚函数，交给子类实现多态，那么是不是纯虚函数呢？显然是纯虚函数，因为父类自己用不到这个函数，都是子类用来创建自己的，而且子类必须给父类提供一个创建自己的功能，每个子类都要实现，那么这个父类中这个函数就设计好了：",-1),Ce=l("p",null,"virtual clone() const = 0; //仅仅创建而不改变数据成员，所以是 const",-1),_e=l("blockquote",null,[l("p",null,"利用虚函数来实现多态")],-1),ge=l("p",null,"子类只需要实现多态就行了，那么子类的 clone 中可以直接调用自己的构造函数来 clone 吗？这是不可以的，因为第一个被调用的 ctor 会将子类加入父类 prototype 数组，如果每个 clone 都调用这个 ctor，那父类 prototype 数组会存在大量子类地址，而我们实际上只要有一个地址就能满足需求了，所以需要重写一个不加入 prototype 的 ctor 供 clone 调用。",-1),be=l("p",null,[l("code",null,"LandSatImage(int dummy){ \\_id =\\_count;} //dummy 是假参数，只是为了实现重载 \\_LandSatImage\\* clone(){return new LandSatImage(1);}"),s(" ​ 这样一来，我们的目标基本达到了，子类创建一个自己，通过调用父类的静态函数将自己的地址交给父类的静态数据成员，然后父类通过调用子类实现的虚函数来创建子类。但是还剩下两个问题：")],-1),me=l("ul",null,[l("li",null,"目前只有子类对象创建过后，父类才能创建子类对象，有没有办法将这个过程提前呢？"),l("li",null,"父类又不知道子类的名称，所有子类在它眼里都是指针，如果来创建指定的子类呢？")],-1),fe=l("p",null,"我们继续改造，先看第一个问题，声明子类后，在程序里手动创建子类，这是一般情况，想要提前也是可以的，声明一个静态子类对象，在程序开始时就会初始化在静态变量区，这样就可以提前创建子类，父类就可以直接用了。 另外，因为子类的构造函数会将自己加入父类，而父类的空间有限，所以要将子类的构造函数设为 private，防止外界随意创建子类，子类的静态对象也应是 private，防止除父类外的人随意访问这个静态对象，通过 clone 函数来创建子类对象（clone 函数一定是 public 的，因为父类需要调用这个函数）。 ​ 下面看第二个问题，对于父类来说，每个 prototype 里的数据都是一个未知类型的指针，那如何选择想要的指针，创建想要的对象呢？可以通过枚举 enum 来实现。 父类先实现好定义几种枚举，子类则实现一个一个返回这些枚举类型的函数，这样就通过事先约定好的枚举名称解决了。",-1);function ve(t,Ee,Be,ke,r,xe){const o=u,p=i;return d(),D(p,{frontmatter:r.frontmatter,data:r.data},{"main-content-md":e(()=>[C,h(" more "),_,l("h1",g,[s("Class Without Pointer Members "),n(o,{class:"header-anchor",href:"#class-without-pointer-members","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h1",b,[s("一、头文件与类的声明 "),n(o,{class:"header-anchor",href:"#一、头文件与类的声明","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h2",m,[s('1. ".h" 和 ".cpp" '),n(o,{class:"header-anchor",href:"#_1-h-和-cpp","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),f,v,l("h2",E,[s("2. 防卫式声明 "),n(o,{class:"header-anchor",href:"#_2-防卫式声明","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),B,k,l("h2",x,[s("3. inline（内联函数） "),n(o,{class:"header-anchor",href:"#_3-inline（内联函数）","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),j,I,w,S,l("h2",T,[s("4. access level（访问级别） "),n(o,{class:"header-anchor",href:"#_4-access-level（访问级别）","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),q,z,O,l("h1",H,[s("二、构造函数 "),n(o,{class:"header-anchor",href:"#二、构造函数","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h2",W,[s("1. constructor（ctor，构造函数） "),n(o,{class:"header-anchor",href:"#_1-constructor（ctor，构造函数）","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),L,P,M,$,Q,l("h1",N,[s("三、参数传递与返回值 "),n(o,{class:"header-anchor",href:"#三、参数传递与返回值","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h2",V,[s("1. const member function（常量成员函数） "),n(o,{class:"header-anchor",href:"#_1-const-member-function（常量成员函数）","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Y,Z,R,l("h2",G,[s("2. pass by value vs. pass by reference（to const)(参数传递) "),n(o,{class:"header-anchor",href:"#_2-pass-by-value-vs-pass-by-reference（to-const-参数传递","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),J,U,l("h2",X,[s("3. return by value vs. return by reference（to const)(返回值传递) "),n(o,{class:"header-anchor",href:"#_3-return-by-value-vs-return-by-reference（to-const-返回值传递","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),K,l("h2",ll,[s("4. friend（友元） "),n(o,{class:"header-anchor",href:"#_4-friend（友元）","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),sl,l("h2",el,[s("5. 相同 class 的各个 objects 互为 friends(友元) "),n(o,{class:"header-anchor",href:"#_5-相同-class-的各个-objects-互为-friends-友元","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),ol,l("h1",nl,[s("四、操作符重载与临时对象 "),n(o,{class:"header-anchor",href:"#四、操作符重载与临时对象","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h2",tl,[s("1. operator overloading -1（双目操作符重载，by 成员函数） "),n(o,{class:"header-anchor",href:"#_1-operator-overloading-1（双目操作符重载，by-成员函数）","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),al,cl,l("h2",rl,[s("2. return by reference 语法分析 "),n(o,{class:"header-anchor",href:"#_2-return-by-reference-语法分析","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h1",pl,[il,s(),n(o,{class:"header-anchor",href:"#","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),yl,l("h2",Fl,[s("3. operator overloading -2（双目操作符重载，by 非成员函数） "),n(o,{class:"header-anchor",href:"#_3-operator-overloading-2（双目操作符重载，by-非成员函数）","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Dl,dl,hl,l("h2",ul,[s('4. temp object（临时对象，"typename（）"） '),n(o,{class:"header-anchor",href:"#_4-temp-object（临时对象，-typename（）-）","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Al,l("h2",Cl,[s("5. operator overloading -3（单目运算符重载，非成员函数） "),n(o,{class:"header-anchor",href:"#_5-operator-overloading-3（单目运算符重载，非成员函数）","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),_l,gl,l("h2",bl,[s("6. operator overloading -4 (<<双目运算符重载，非成员函数) "),n(o,{class:"header-anchor",href:"#_6-operator-overloading-4-双目运算符重载，非成员函数","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),ml,fl,vl,l("h1",El,[s("总结 "),n(o,{class:"header-anchor",href:"#总结","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h2",Bl,[s("1. 所有的数据放在 private 里 "),n(o,{class:"header-anchor",href:"#_1-所有的数据放在-private-里","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h2",kl,[s("2. 使用初始化列表来初始化对象 "),n(o,{class:"header-anchor",href:"#_2-使用初始化列表来初始化对象","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h2",xl,[s("3. 所有大于四字节的参数传递都用引用，除了 local object "),n(o,{class:"header-anchor",href:"#_3-所有大于四字节的参数传递都用引用，除了-local-object","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h2",jl,[s("4. 所有不想被修改的地方都要加 const "),n(o,{class:"header-anchor",href:"#_4-所有不想被修改的地方都要加-const","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h1",Il,[s("Class With Pointer Members "),n(o,{class:"header-anchor",href:"#class-with-pointer-members","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h1",wl,[s("五、三大函数：拷贝构造，拷贝复制，析构 "),n(o,{class:"header-anchor",href:"#五、三大函数：拷贝构造，拷贝复制，析构","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h2",Sl,[s("1. Implement A Class With Pointer Members(string.h) "),n(o,{class:"header-anchor",href:"#_1-implement-a-class-with-pointer-members-string-h","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Tl,ql,zl,l("h2",Ol,[s("2. Big Three（三个特殊函数） "),n(o,{class:"header-anchor",href:"#_2-big-three（三个特殊函数）","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Hl,Wl,l("h1",Ll,[s("六、堆，栈与内存管理 "),n(o,{class:"header-anchor",href:"#六、堆，栈与内存管理","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h2",Pl,[s("0. Size of Variables "),n(o,{class:"header-anchor",href:"#_0-size-of-variables","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Ml,l("h2",$l,[s("1. Stack（栈） "),n(o,{class:"header-anchor",href:"#_1-stack（栈）","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Ql,l("h2",Nl,[s("2. Heap（堆） "),n(o,{class:"header-anchor",href:"#_2-heap（堆）","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Vl,l("h2",Yl,[s("3. Stack Object, Static local objects, Global objects, Heap objects "),n(o,{class:"header-anchor",href:"#_3-stack-object-static-local-objects-global-objects-heap-objects","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Zl,l("h2",Rl,[s("4. new: 先分配内存，再调用 ctor "),n(o,{class:"header-anchor",href:"#_4-new-先分配内存，再调用-ctor","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Gl,l("h2",Jl,[s("5. delete:先调用 dtor，再释放内存 "),n(o,{class:"header-anchor",href:"#_5-delete-先调用-dtor，再释放内存","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Ul,l("h2",Xl,[s("6. 内存分配 "),n(o,{class:"header-anchor",href:"#_6-内存分配","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Kl,ls,l("h2",ss,[s("7. Array new 一定要搭配 Array delete "),n(o,{class:"header-anchor",href:"#_7-array-new-一定要搭配-array-delete","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),es,os,l("h2",ns,[ts,s(),n(o,{class:"header-anchor",href:"#-1","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),as,l("h1",cs,[s("七、扩展补充：类模板，函数模板，及其他 "),n(o,{class:"header-anchor",href:"#七、扩展补充：类模板，函数模板，及其他","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h2",rs,[s("1. Static "),n(o,{class:"header-anchor",href:"#_1-static","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),ps,is,ys,Fs,Ds,ds,hs,us,As,Cs,l("h2",_s,[s("2. 把 ctors 放在 private 里 "),n(o,{class:"header-anchor",href:"#_2-把-ctors-放在-private-里","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),gs,bs,ms,fs,l("h2",vs,[s("3. Namespace "),n(o,{class:"header-anchor",href:"#_3-namespace","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Es,Bs,l("h2",ks,[s("4. Template "),n(o,{class:"header-anchor",href:"#_4-template","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),xs,l("h2",js,[s("5. More details "),n(o,{class:"header-anchor",href:"#_5-more-details","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Is,l("h1",ws,[s("八、组合、委托与继承 "),n(o,{class:"header-anchor",href:"#八、组合、委托与继承","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h2",Ss,[s("1. Composition（组合），表示 has-a "),n(o,{class:"header-anchor",href:"#_1-composition（组合），表示-has-a","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Ts,qs,l("h2",zs,[s("2. Composition (组合) 关系中的构造和析构 "),n(o,{class:"header-anchor",href:"#_2-composition-组合-关系中的构造和析构","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Os,l("h2",Hs,[s("3. Delegation（委托），Composition by reference "),n(o,{class:"header-anchor",href:"#_3-delegation（委托），composition-by-reference","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Ws,Ls,Ps,Ms,l("h2",$s,[s("4. Inheritance（继承），表示 is - a "),n(o,{class:"header-anchor",href:"#_4-inheritance（继承），表示-is-a","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Qs,Ns,l("h2",Vs,[s("5. Inheritance（继承）关系下的构造和析构 "),n(o,{class:"header-anchor",href:"#_5-inheritance（继承）关系下的构造和析构","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Ys,Zs,Rs,l("h1",Gs,[s("九、虚函数与多态 "),n(o,{class:"header-anchor",href:"#九、虚函数与多态","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h2",Js,[s("1. 三种虚函数 "),n(o,{class:"header-anchor",href:"#_1-三种虚函数","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),Us,Xs,l("h2",Ks,[s("2. derived class 调用父类函数 "),n(o,{class:"header-anchor",href:"#_2-derived-class-调用父类函数","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),le,se,l("h2",ee,[s("3. Inheritance + Composition 关系下的 ctor and dtor "),n(o,{class:"header-anchor",href:"#_3-inheritance-composition-关系下的-ctor-and-dtor","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),oe,l("h1",ne,[s("十、委托相关设计 "),n(o,{class:"header-anchor",href:"#十、委托相关设计","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),l("h2",te,[s("1. Inhertance + Delegation,Composite(混合模式) "),n(o,{class:"header-anchor",href:"#_1-inhertance-delegation-composite-混合模式","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),ae,ce,l("h2",re,[s("2. Inhertance + Delegation,Prototype(原型模式) "),n(o,{class:"header-anchor",href:"#_2-inhertance-delegation-prototype-原型模式","aria-hidden":"true"},{default:e(()=>[s("#")]),_:1})]),pe,ie,ye,Fe,De,de,he,ue,Ae,Ce,_e,ge,be,me,fe]),"main-header":e(()=>[a(t.$slots,"main-header")]),"main-header-after":e(()=>[a(t.$slots,"main-header-after")]),"main-nav":e(()=>[a(t.$slots,"main-nav")]),"main-content":e(()=>[a(t.$slots,"main-content")]),"main-content-after":e(()=>[a(t.$slots,"main-content-after")]),"main-nav-before":e(()=>[a(t.$slots,"main-nav-before")]),"main-nav-after":e(()=>[a(t.$slots,"main-nav-after")]),comment:e(()=>[a(t.$slots,"comment")]),footer:e(()=>[a(t.$slots,"footer")]),aside:e(()=>[a(t.$slots,"aside")]),"aside-custom":e(()=>[a(t.$slots,"aside-custom")]),default:e(()=>[a(t.$slots,"default")]),_:3},8,["frontmatter","data"])}const ze=y(A,[["render",ve]]);export{qe as __pageData,ze as default};

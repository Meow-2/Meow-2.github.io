import{_ as p}from"./ValaxyMain.vue_vue_type_style_index_0_lang-bf8ee3fd.js";import{_ as d,p as y,c as F,w as s,o as u,e as h,a as e,d as l,b as o,r as a,f as g}from"./app-4433fae6.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-80290804.js";import"./YunCard.vue_vue_type_style_index_0_lang-e4df850e.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-80be03ea.js";const is=JSON.parse('{"title":"C++面向对象程序设计复习笔记（下）","description":"","frontmatter":{"title":"C++面向对象程序设计复习笔记（下）","toc":true,"date":"2021-09-15T23:05:18.000Z","tags":["OPP","Cpp"],"categories":["笔记","侯捷 C++八部曲"],"cover":null},"headers":[{"level":2,"title":"1. Non-explicit-one-argument ctor","slug":"_1-non-explicit-one-argument-ctor","link":"#_1-non-explicit-one-argument-ctor","children":[]},{"level":2,"title":"2. Convertion function vs non-explicit-one-argument ctor","slug":"_2-convertion-function-vs-non-explicit-one-argument-ctor","link":"#_2-convertion-function-vs-non-explicit-one-argument-ctor","children":[]},{"level":2,"title":"3. Explicit one-argument ctor","slug":"_3-explicit-one-argument-ctor","link":"#_3-explicit-one-argument-ctor","children":[]},{"level":2,"title":"4. Conversion function 在 STL 中的应用","slug":"_4-conversion-function-在-stl-中的应用","link":"#_4-conversion-function-在-stl-中的应用","children":[]},{"level":2,"title":"1. Pointer like classes","slug":"_1-pointer-like-classes","link":"#_1-pointer-like-classes","children":[]},{"level":2,"title":"2. Iterator","slug":"_2-iterator","link":"#_2-iterator","children":[]},{"level":2,"title":"1. Operator “()”Overload","slug":"_1-operator-“-”overload","link":"#_1-operator-“-”overload","children":[]},{"level":2,"title":"2. STL 中仿函数的继承","slug":"_2-stl-中仿函数的继承","link":"#_2-stl-中仿函数的继承","children":[]},{"level":2,"title":"1. Namespace 经验谈","slug":"_1-namespace-经验谈","link":"#_1-namespace-经验谈","children":[]},{"level":2,"title":"1. Class Template，类模板","slug":"_1-class-template，类模板","link":"#_1-class-template，类模板","children":[]},{"level":2,"title":"2. Function Template，函数模板","slug":"_2-function-template，函数模板","link":"#_2-function-template，函数模板","children":[]},{"level":2,"title":"3. Member Template，成员模板","slug":"_3-member-template，成员模板","link":"#_3-member-template，成员模板","children":[]},{"level":2,"title":"5. Specialization，模板特化","slug":"_5-specialization，模板特化","link":"#_5-specialization，模板特化","children":[]},{"level":2,"title":"6. Partial Specialization，模板偏特化","slug":"_6-partial-specialization，模板偏特化","link":"#_6-partial-specialization，模板偏特化","children":[]},{"level":2,"title":"7. template template parameter，模板模板参数","slug":"_7-template-template-parameter，模板模板参数","link":"#_7-template-template-parameter，模板模板参数","children":[]},{"level":2,"title":"1. C++ 标准库","slug":"_1-c-标准库","link":"#_1-c-标准库","children":[]},{"level":2,"title":"2. C++ 11 的学习建议","slug":"_2-c-11-的学习建议","link":"#_2-c-11-的学习建议","children":[]},{"level":2,"title":"3. Variable Templates（since C++11），数量不定的模版参数","slug":"_3-variable-templates（since-c-11），数量不定的模版参数","link":"#_3-variable-templates（since-c-11），数量不定的模版参数","children":[]},{"level":2,"title":"4. Auto（since C++11）,自动类型推断","slug":"_4-auto（since-c-11）-自动类型推断","link":"#_4-auto（since-c-11）-自动类型推断","children":[]},{"level":2,"title":"5. Ranged-Base For (since C++11)","slug":"_5-ranged-base-for-since-c-11","link":"#_5-ranged-base-for-since-c-11","children":[]},{"level":2,"title":"6.Reference 再解","slug":"_6-reference-再解","link":"#_6-reference-再解","children":[]},{"level":2,"title":"7. Refernce Usage，引用与函数签名","slug":"_7-refernce-usage，引用与函数签名","link":"#_7-refernce-usage，引用与函数签名","children":[]},{"level":2,"title":"1. Vptr and Vtbl，虚指针和虚表","slug":"_1-vptr-and-vtbl，虚指针和虚表","link":"#_1-vptr-and-vtbl，虚指针和虚表","children":[]},{"level":2,"title":"3. Dynamic Binding，动态绑定","slug":"_3-dynamic-binding，动态绑定","link":"#_3-dynamic-binding，动态绑定","children":[]},{"level":2,"title":"4. Const，常量","slug":"_4-const，常量","link":"#_4-const，常量","children":[]},{"level":2,"title":"1. Overload ::operator new,::operator delete,::operator new[]，::operator delete[]","slug":"_1-overload-operator-new-operator-delete-operator-new-，-operator-delete","link":"#_1-overload-operator-new-operator-delete-operator-new-，-operator-delete","children":[]},{"level":2,"title":"2. Overload operator new, delete Using Member Function","slug":"_2-overload-operator-new-delete-using-member-function","link":"#_2-overload-operator-new-delete-using-member-function","children":[]},{"level":2,"title":"3. New[] 的内存分析","slug":"_3-new-的内存分析","link":"#_3-new-的内存分析","children":[]},{"level":2,"title":"4. Overload placement operator new(), delete()","slug":"_4-overload-placement-operator-new-delete","link":"#_4-overload-placement-operator-new-delete","children":[]},{"level":2,"title":"5. Basic_string 使用 new(extra) 扩充申请量","slug":"_5-basic-string-使用-new-extra-扩充申请量","link":"#_5-basic-string-使用-new-extra-扩充申请量","children":[]}],"relativePath":"pages/posts/note/houjie/object-oriented-programming-two.md","path":"/home/runner/work/YlYZ/YlYZ/pages/posts/note/houjie/object-oriented-programming-two.md","lastUpdated":1686297441000}'),c=JSON.parse('{"title":"C++面向对象程序设计复习笔记（下）","description":"","frontmatter":{"title":"C++面向对象程序设计复习笔记（下）","toc":true,"date":"2021-09-15T23:05:18.000Z","tags":["OPP","Cpp"],"categories":["笔记","侯捷 C++八部曲"],"cover":null},"headers":[{"level":2,"title":"1. Non-explicit-one-argument ctor","slug":"_1-non-explicit-one-argument-ctor","link":"#_1-non-explicit-one-argument-ctor","children":[]},{"level":2,"title":"2. Convertion function vs non-explicit-one-argument ctor","slug":"_2-convertion-function-vs-non-explicit-one-argument-ctor","link":"#_2-convertion-function-vs-non-explicit-one-argument-ctor","children":[]},{"level":2,"title":"3. Explicit one-argument ctor","slug":"_3-explicit-one-argument-ctor","link":"#_3-explicit-one-argument-ctor","children":[]},{"level":2,"title":"4. Conversion function 在 STL 中的应用","slug":"_4-conversion-function-在-stl-中的应用","link":"#_4-conversion-function-在-stl-中的应用","children":[]},{"level":2,"title":"1. Pointer like classes","slug":"_1-pointer-like-classes","link":"#_1-pointer-like-classes","children":[]},{"level":2,"title":"2. Iterator","slug":"_2-iterator","link":"#_2-iterator","children":[]},{"level":2,"title":"1. Operator “()”Overload","slug":"_1-operator-“-”overload","link":"#_1-operator-“-”overload","children":[]},{"level":2,"title":"2. STL 中仿函数的继承","slug":"_2-stl-中仿函数的继承","link":"#_2-stl-中仿函数的继承","children":[]},{"level":2,"title":"1. Namespace 经验谈","slug":"_1-namespace-经验谈","link":"#_1-namespace-经验谈","children":[]},{"level":2,"title":"1. Class Template，类模板","slug":"_1-class-template，类模板","link":"#_1-class-template，类模板","children":[]},{"level":2,"title":"2. Function Template，函数模板","slug":"_2-function-template，函数模板","link":"#_2-function-template，函数模板","children":[]},{"level":2,"title":"3. Member Template，成员模板","slug":"_3-member-template，成员模板","link":"#_3-member-template，成员模板","children":[]},{"level":2,"title":"5. Specialization，模板特化","slug":"_5-specialization，模板特化","link":"#_5-specialization，模板特化","children":[]},{"level":2,"title":"6. Partial Specialization，模板偏特化","slug":"_6-partial-specialization，模板偏特化","link":"#_6-partial-specialization，模板偏特化","children":[]},{"level":2,"title":"7. template template parameter，模板模板参数","slug":"_7-template-template-parameter，模板模板参数","link":"#_7-template-template-parameter，模板模板参数","children":[]},{"level":2,"title":"1. C++ 标准库","slug":"_1-c-标准库","link":"#_1-c-标准库","children":[]},{"level":2,"title":"2. C++ 11 的学习建议","slug":"_2-c-11-的学习建议","link":"#_2-c-11-的学习建议","children":[]},{"level":2,"title":"3. Variable Templates（since C++11），数量不定的模版参数","slug":"_3-variable-templates（since-c-11），数量不定的模版参数","link":"#_3-variable-templates（since-c-11），数量不定的模版参数","children":[]},{"level":2,"title":"4. Auto（since C++11）,自动类型推断","slug":"_4-auto（since-c-11）-自动类型推断","link":"#_4-auto（since-c-11）-自动类型推断","children":[]},{"level":2,"title":"5. Ranged-Base For (since C++11)","slug":"_5-ranged-base-for-since-c-11","link":"#_5-ranged-base-for-since-c-11","children":[]},{"level":2,"title":"6.Reference 再解","slug":"_6-reference-再解","link":"#_6-reference-再解","children":[]},{"level":2,"title":"7. Refernce Usage，引用与函数签名","slug":"_7-refernce-usage，引用与函数签名","link":"#_7-refernce-usage，引用与函数签名","children":[]},{"level":2,"title":"1. Vptr and Vtbl，虚指针和虚表","slug":"_1-vptr-and-vtbl，虚指针和虚表","link":"#_1-vptr-and-vtbl，虚指针和虚表","children":[]},{"level":2,"title":"3. Dynamic Binding，动态绑定","slug":"_3-dynamic-binding，动态绑定","link":"#_3-dynamic-binding，动态绑定","children":[]},{"level":2,"title":"4. Const，常量","slug":"_4-const，常量","link":"#_4-const，常量","children":[]},{"level":2,"title":"1. Overload ::operator new,::operator delete,::operator new[]，::operator delete[]","slug":"_1-overload-operator-new-operator-delete-operator-new-，-operator-delete","link":"#_1-overload-operator-new-operator-delete-operator-new-，-operator-delete","children":[]},{"level":2,"title":"2. Overload operator new, delete Using Member Function","slug":"_2-overload-operator-new-delete-using-member-function","link":"#_2-overload-operator-new-delete-using-member-function","children":[]},{"level":2,"title":"3. New[] 的内存分析","slug":"_3-new-的内存分析","link":"#_3-new-的内存分析","children":[]},{"level":2,"title":"4. Overload placement operator new(), delete()","slug":"_4-overload-placement-operator-new-delete","link":"#_4-overload-placement-operator-new-delete","children":[]},{"level":2,"title":"5. Basic_string 使用 new(extra) 扩充申请量","slug":"_5-basic-string-使用-new-extra-扩充申请量","link":"#_5-basic-string-使用-new-extra-扩充申请量","children":[]}],"relativePath":"pages/posts/note/houjie/object-oriented-programming-two.md","path":"/home/runner/work/YlYZ/YlYZ/pages/posts/note/houjie/object-oriented-programming-two.md","lastUpdated":1686297441000}'),D={name:"pages/posts/note/houjie/object-oriented-programming-two.md",data(){return{data:c,frontmatter:c.frontmatter}},setup(){y("pageData",c)}},m=e("p",null,"侯捷 C++面向对象程序设计的下半部分笔记",-1),_=e("meta",{name:"referrer",content:"no-referrer"},null,-1),f={id:"object-oriented-programming",tabindex:"-1"},b={id:"一、类型转换函数（conversion-function）",tabindex:"-1"},C=e("div",{class:"language-cpp"},[e("span",{class:"copy"}),e("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#676E95","font-style":"italic"}},"//Fraction.h")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"class"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"Fraction"),e("span",{style:{color:"#89DDFF"}},"{")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#C792EA"}},"public"),e("span",{style:{color:"#89DDFF"}},":")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"        "),e("span",{style:{color:"#82AAFF"}},"Fraction"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#C792EA"}},"int"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"num"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#C792EA"}},"int"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"den"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"="),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#F78C6C"}},"1"),e("span",{style:{color:"#89DDFF"}},")")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"            "),e("span",{style:{color:"#89DDFF"}},":"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#82AAFF"}},"m_numerator"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F07178"}},"num"),e("span",{style:{color:"#89DDFF"}},"),"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#82AAFF"}},"m_denominator"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F07178"}},"den"),e("span",{style:{color:"#89DDFF"}},")"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"{}")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"        "),e("span",{style:{color:"#F78C6C"}},"operator"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"double"),e("span",{style:{color:"#89DDFF"}},"()"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"{")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"            "),e("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#C792EA"}},"double"),e("span",{style:{color:"#89DDFF"}},")("),e("span",{style:{color:"#F07178"}},"m_numerator "),e("span",{style:{color:"#89DDFF"}},"/"),e("span",{style:{color:"#F07178"}}," m_denominator"),e("span",{style:{color:"#89DDFF"}},");")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"        "),e("span",{style:{color:"#89DDFF"}},"}")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#C792EA"}},"private"),e("span",{style:{color:"#89DDFF"}},":")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"        "),e("span",{style:{color:"#C792EA"}},"int"),e("span",{style:{color:"#F07178"}}," m_numerator"),e("span",{style:{color:"#89DDFF"}},";"),e("span",{style:{color:"#676E95","font-style":"italic"}}," //分子")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"        "),e("span",{style:{color:"#C792EA"}},"int"),e("span",{style:{color:"#F07178"}}," m_denominator"),e("span",{style:{color:"#89DDFF"}},";"),e("span",{style:{color:"#676E95","font-style":"italic"}}," //分母")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"};")]),l(`
`),e("span",{class:"line"}),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#676E95","font-style":"italic"}},"//main.cpp")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"int"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#82AAFF"}},"main"),e("span",{style:{color:"#89DDFF"}},"(){")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"    Fraction "),e("span",{style:{color:"#82AAFF"}},"f"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F78C6C"}},"3"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#F78C6C"}},"5"),e("span",{style:{color:"#89DDFF"}},");")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"    "),e("span",{style:{color:"#C792EA"}},"double"),e("span",{style:{color:"#A6ACCD"}}," d "),e("span",{style:{color:"#89DDFF"}},"="),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#F78C6C"}},"4"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#89DDFF"}},"+"),e("span",{style:{color:"#A6ACCD"}}," f"),e("span",{style:{color:"#89DDFF"}},";"),e("span",{style:{color:"#676E95","font-style":"italic"}}," //corrcet")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"    "),e("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#F78C6C"}},"0"),e("span",{style:{color:"#89DDFF"}},";")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"}")]),l(`
`),e("span",{class:"line"})])])],-1),A=e("ul",null,[e("li",null,"opearator double() const { }，类型转换 function 属于单目操作符，cpp 类型转换重载不需要声明返回类型"),e("li",null,'编译器在编译到 double d = 4 + f " 时，会先考虑是否有重载+，先看 4 有没有重载+，显然没有，再看全局函数有没有重载+，又没有。这时，编译器会想其他办法，比如看有没有办法将 Fraction 对象转成 double，因为重载了 double 类型转换操作符，所以编译通过'),e("li",null,"只要你认为合理，可以写多个类型转换函数")],-1),v={id:"_1-non-explicit-one-argument-ctor",tabindex:"-1"},k=e("div",{class:"language-cpp"},[e("span",{class:"copy"}),e("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#676E95","font-style":"italic"}},"//fraction.h")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"class"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"Fraction")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"{")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"public"),e("span",{style:{color:"#89DDFF"}},":")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#82AAFF"}},"Fraction"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#C792EA"}},"int"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"num"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#C792EA"}},"int"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"den"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"="),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#F78C6C"}},"1"),e("span",{style:{color:"#89DDFF"}},"):"),e("span",{style:{color:"#82AAFF"}},"m_numerator"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F07178"}},"num"),e("span",{style:{color:"#89DDFF"}},"),"),e("span",{style:{color:"#82AAFF"}},"m_denominator"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F07178"}},"den"),e("span",{style:{color:"#89DDFF"}},"){}")]),l(`
`),e("span",{class:"line"}),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#FFCB6B"}},"Fraction"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#F78C6C"}},"operator"),e("span",{style:{color:"#FFCB6B"}},"+"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"Fraction"),e("span",{style:{color:"#C792EA"}},"&"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"f"),e("span",{style:{color:"#89DDFF"}},"){")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"     "),e("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#82AAFF"}},"Fraction"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F07178"}},"......"),e("span",{style:{color:"#89DDFF"}},");")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#89DDFF"}},"}")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"private"),e("span",{style:{color:"#89DDFF"}},":")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#C792EA"}},"int"),e("span",{style:{color:"#F07178"}}," m_numerator"),e("span",{style:{color:"#89DDFF"}},";")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#C792EA"}},"int"),e("span",{style:{color:"#F07178"}}," m_denominator"),e("span",{style:{color:"#89DDFF"}},";")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"}")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#676E95","font-style":"italic"}},"//main.cpp")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#FFCB6B"}},"Fraction"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#82AAFF"}},"f"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F78C6C"}},"3"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#F78C6C"}},"5"),e("span",{style:{color:"#89DDFF"}},");")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"fraction d2 "),e("span",{style:{color:"#89DDFF"}},"="),e("span",{style:{color:"#A6ACCD"}}," f "),e("span",{style:{color:"#89DDFF"}},"+"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#F78C6C"}},"4"),e("span",{style:{color:"#89DDFF"}},";")]),l(`
`),e("span",{class:"line"})])])],-1),B=e("ul",null,[e("li",null,"explicit 是 cpp 的关键字，non-explicit-one-argument 就是没有 explicit 关键字的，一个实参的 ctor（第二个参数是有默认值的，所以 ctor 可以只有一个参数）"),e("li",null,"编译器在执行“fraction d2 = f + 4”时，先看 Fraction 有没有重载 + ，重载了，所以调用重载的加法，但是重载的加法的第二个参数不是 int 型，所以编译器想办法，看能不能把“4”转化成“Fraction”，因为“Fraction”有单个参数的 ctor，所以可以，编译通过")],-1),w={id:"_2-convertion-function-vs-non-explicit-one-argument-ctor",tabindex:"-1"},E=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632751536296-d858cec7-6f51-4f45-a026-a0b4baeae8d0.png#clientId=u56bb7630-8d8f-4&from=paste&height=365&id=u4a00835e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=730&originWidth=1111&originalType=binary&ratio=1&size=155821&status=done&style=none&taskId=u58a1aeed-eb43-4c57-abec-79d16bfb73d&width=555.5",alt:""})],-1),x=e("ul",null,[e("li",null,"ambiguous，歧义"),e("li",null,"按绿色，4 转为 Fraction object，可以执行 Fraction 重载后的加法，编译通过"),e("li",null,"按黄色，Fraction object 转为 double，double 加 4，还是 double，double 又可以转化为 Fraction(通过 non-explicit-one-argument ctor)，编译通过")],-1),T=e("p",null,"​ 因此产生了歧义，当两条路都能走通的时候，编译器不知道走哪一条，所以会报错；这里需要注意的是，按黄色的情况中，Fraction d2 = 4.6 是可以这样写的，也是初始化的一种写法，相当于“Fraction d2(4.6)”；",-1),j=e("p",null,"class 的 ctor 在默认情况下，是 implicit 的，意为隐式的，编译器会添加将 one arugment 转化为 Fraction 的转化方法，所以绿色部分可以行的通，因为编译器可以通过 ctor 将 int 转化为 Fraction；",-1),z={id:"_3-explicit-one-argument-ctor",tabindex:"-1"},I=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632801681453-b69d0423-c55c-458f-b7dc-ed7da31e02de.png#clientId=u92a2209c-e7eb-4&from=paste&height=306&id=u1dba37f3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=612&originWidth=974&originalType=binary&ratio=1&size=120914&status=done&style=none&taskId=ue94137d5-aeaa-4416-b6f9-d351b9264b3&width=487",alt:""})],-1),O=e("ul",null,[e("li",null,"ctor 默认是 implicit 的，添加关键字 explicit 变为显示的，这样一来，编译器无法再将 double 转为 Fraction，绿、黄两条路都行不通，直接报错"),e("li",null,"explicit 就是告诉编译器，不可以再把 ctor 函数用于类型转换，我又没有明白说要这么做"),e("li",null,"explicit 关键字只有 ctor 这里才能用到，不过在模板的很小的一个地方也用的上，但是很细微，很少有人注意，就不考虑了")],-1),q={id:"_4-conversion-function-在-stl-中的应用",tabindex:"-1"},W=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632802467888-2d5bf322-55a8-483c-90a9-3eb43299924c.png#clientId=u92a2209c-e7eb-4&from=paste&height=327&id=u099d5b79&margin=%5Bobject%20Object%5D&name=image.png&originHeight=653&originWidth=906&originalType=binary&ratio=1&size=114498&status=done&style=none&taskId=uc944ef8a-5066-47d3-b9c4-37a68935bc3&width=453",alt:""})],-1),H=e("ul",null,[e("li",null,"代理模式")],-1),V={id:"二、智能指针（pointer-like-classes）",tabindex:"-1"},P={id:"_1-pointer-like-classes",tabindex:"-1"},S=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632803185770-6c896a16-6a4b-4f33-8fce-1b53b27ea0a0.png#clientId=ueb86ddab-a5c5-4&from=paste&height=348&id=ue93a1209&margin=%5Bobject%20Object%5D&name=image.png&originHeight=696&originWidth=1290&originalType=binary&ratio=1&size=142086&status=done&style=none&taskId=uff2996fd-6cf1-4364-91ab-cae191448f6&width=645",alt:""})],-1),N=e("p",null,"一个 C++ Class 产生的 Object 可能会像两种东西：",-1),U=e("ul",null,[e("li",null,"Class 产生的对象像一个指针，pointer-like classes，智能指针"),e("li",null,"Class 产生的对象像一个函数")],-1),$=e("p",null,"Pointer-like classes 就是将原有的指针封装起来的 class，在不改变原有指针功能的基础上提供更多的功能，比如自动释放内存之类的，所以智能指针需要重载指针的操作符，如“*”，“->”：",-1),M=e("ul",null,[e("li",null,"上图中“*”的重载很好理解，重点是“->”的重载，“->”有一个特殊的行为，作用下去的结果会继续作用下去，这两个操作符重载的写法是固定的。")],-1),R={id:"_2-iterator",tabindex:"-1"},L=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632820889822-399202fb-b7b4-450f-9a14-8881bd84f943.png#clientId=u979d7701-2f52-4&from=paste&height=349&id=ubff94ad7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=697&originWidth=1327&originalType=binary&ratio=1&size=234299&status=done&style=none&taskId=u7af093d8-bbe6-4cb5-a291-4c6a82e318b&width=664",alt:""})],-1),Q=e("p",null,"除了基本的智能指针外，还有另一种智能指针，迭代器：",-1),Y=e("ul",null,[e("li",null,"库（Lib）的使用往往会用到容器，而容器本身一定带着迭代器（iterator）。"),e("li",null,"迭代器也是指针的封装，指向容器的一个元素，但是比一般的智能指针多重载了许多操作符，比如++和--；"),e("li",null,"例子中的 iterator 是 T 的迭代器，从外界（使用者）看来就是指向 T 的指针，所以 iterator 的“*”、“->”返回的是 T 本身和 T 的地址。")],-1),Z=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632820920103-2cd891ce-9a5a-4c5e-a3c3-ff5ec283bb84.png#clientId=u979d7701-2f52-4&from=paste&height=313&id=u7ea8bfe3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=626&originWidth=1207&originalType=binary&ratio=1&size=152327&status=done&style=none&taskId=u3b8f984e-f9d3-4905-97ef-3e3b5871c82&width=604",alt:""})],-1),G=e("blockquote",null,[e("p",null,"相当于 T（容器元素）被进行了两次封装，先被封装在一个双向链表的数据结构里，然后再将这个数据结构的指针封装成 iterator，进行第一次封装是为了更好地访问查找 T，进行第二次封装是为了智能化指针")],-1),J={id:"三、仿函数（function-like-classes）",tabindex:"-1"},K={id:"_1-operator-“-”overload",tabindex:"-1"},X=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632820959470-2862438d-d23e-477d-a017-16394d3ab37d.png#clientId=u979d7701-2f52-4&from=paste&height=343&id=uf8d45465&margin=%5Bobject%20Object%5D&name=image.png&originHeight=686&originWidth=1254&originalType=binary&ratio=1&size=164024&status=done&style=none&taskId=u52cf7b95-800a-43f5-bd39-d7e128748e2&width=627",alt:""})],-1),ee=e("ul",null,[e("li",null,"“（）”，Function Call Operator，函数调用操作符"),e("li",null,"所以任何一个 Objcet 如果能接受“（）”，则被称为“像函数”或仿函数"),e("li",null,"用例，“select1st()(const Pair& x);”,“select1st()”是创建临时对象")],-1),le={id:"_2-stl-中仿函数的继承",tabindex:"-1"},se=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632821310789-4e05fa4e-362f-441b-81fe-ad1f80dc0f41.png#clientId=u979d7701-2f52-4&from=paste&height=340&id=u3dda1b78&margin=%5Bobject%20Object%5D&name=image.png&originHeight=679&originWidth=1250&originalType=binary&ratio=1&size=949257&status=done&style=none&taskId=u99a2f772-3da6-4bf5-bf7d-2c85217fd27&width=625",alt:""})],-1),ne=e("ul",null,[e("li",null,"标准库里的仿函数都会继承一些 class，比如 unary_function 和 binary_function，与操作数的个数有关，这里不讨论")],-1),oe=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632821850586-d63c05cf-f280-4340-847f-34ec331a7f7a.png#clientId=u979d7701-2f52-4&from=paste&height=256&id=u6b8f9d40&margin=%5Bobject%20Object%5D&name=image.png&originHeight=512&originWidth=879&originalType=binary&ratio=1&size=117185&status=done&style=none&taskId=u6109ec7f-2c6f-44f4-9238-9800a541543&width=439.5",alt:""})],-1),te=e("ul",null,[e("li",null,"上面两个 class 的大小，虽然没有数据，但实现上因为一些限制，得到的大小是 1"),e("li",null,"STL 中有很多的仿函数，都有重载“()”，都继承了一些奇怪的父类")],-1),ae={id:"四、命名空间（namespace）",tabindex:"-1"},ce={id:"_1-namespace-经验谈",tabindex:"-1"},re=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1632838500445-dca64804-0697-4e10-8f26-55355fd2f708.png#clientId=u979d7701-2f52-4&from=paste&height=329&id=uad865687&margin=%5Bobject%20Object%5D&name=image.png&originHeight=657&originWidth=976&originalType=binary&ratio=1&size=130797&status=done&style=none&taskId=u075c0522-ef89-4283-a052-843b1371599&width=488",alt:""})],-1),ie=e("ul",null,[e("li",null,"将一些代码区分开，防止独立作业（两个办公室互不沟通写代码）时，名字冲突"),e("li",null,"在写一些全局的函数时，可以用 namespace 包起来，然后通过 namespace 调用，比如在很多测试函数时，你可以都叫 test，用不同的 namespace 包起来（namespace 的名称可以命名成要测试的东西的名称），这样就不用想很多的函数名")],-1),pe={id:"template-programming",tabindex:"-1"},de={id:"五、模板（class-template）",tabindex:"-1"},ye={id:"_1-class-template，类模板",tabindex:"-1"},Fe=e("div",{class:"language-cpp"},[e("span",{class:"copy"}),e("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"template"),e("span",{style:{color:"#89DDFF"}},"<"),e("span",{style:{color:"#C792EA"}},"typename"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#FFCB6B"}},"T"),e("span",{style:{color:"#89DDFF"}},">")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"class"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"complex")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"{")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"public"),e("span",{style:{color:"#89DDFF"}},":")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#82AAFF"}},"complex"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#FFCB6B"}},"T"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"r"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"="),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#F78C6C"}},"0"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#FFCB6B"}},"T"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"i"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"="),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#F78C6C"}},"0"),e("span",{style:{color:"#89DDFF"}},"):"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#82AAFF"}},"re"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F07178"}},"r"),e("span",{style:{color:"#89DDFF"}},"),"),e("span",{style:{color:"#82AAFF"}},"im"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F07178"}},"i"),e("span",{style:{color:"#89DDFF"}},"){}")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"complex"),e("span",{style:{color:"#C792EA"}},"&"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#F78C6C"}},"operator"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"+="),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"complex"),e("span",{style:{color:"#C792EA"}},"&"),e("span",{style:{color:"#89DDFF"}},");")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#FFCB6B"}},"T"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#82AAFF"}},"real"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"()"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"{"),e("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),e("span",{style:{color:"#F07178"}}," re"),e("span",{style:{color:"#89DDFF"}},";}")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#FFCB6B"}},"T"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#82AAFF"}},"imag"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"()"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"{"),e("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),e("span",{style:{color:"#F07178"}}," im"),e("span",{style:{color:"#89DDFF"}},";}")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"private"),e("span",{style:{color:"#89DDFF"}},":")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    T re"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#F07178"}},"im"),e("span",{style:{color:"#89DDFF"}},";")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#C792EA"}},"friend"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"complex"),e("span",{style:{color:"#C792EA"}},"&"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#82AAFF"}},"__doapl"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#FFCB6B"}},"complex"),e("span",{style:{color:"#C792EA"}},"*"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"complex"),e("span",{style:{color:"#C792EA"}},"&"),e("span",{style:{color:"#89DDFF"}},");")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"};")]),l(`
`),e("span",{class:"line"}),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"{")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}}," complex"),e("span",{style:{color:"#89DDFF"}},"<"),e("span",{style:{color:"#C792EA"}},"double"),e("span",{style:{color:"#89DDFF"}},">"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#82AAFF"}},"c1"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F78C6C"}},"2.5"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#F78C6C"}},"1.5"),e("span",{style:{color:"#89DDFF"}},");")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    complex"),e("span",{style:{color:"#89DDFF"}},"<"),e("span",{style:{color:"#C792EA"}},"int"),e("span",{style:{color:"#89DDFF"}},">"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#82AAFF"}},"c2"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F78C6C"}},"2"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#F78C6C"}},"6"),e("span",{style:{color:"#89DDFF"}},");")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"}")]),l(`
`),e("span",{class:"line"})])])],-1),ue=e("ul",null,[e("li",null,[l("类模板在使用时需要指明"),e("code",null,"<typename>")])],-1),he={id:"_2-function-template，函数模板",tabindex:"-1"},ge=e("div",{class:"language-cpp"},[e("span",{class:"copy"}),e("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"template"),e("span",{style:{color:"#89DDFF"}},"<"),e("span",{style:{color:"#C792EA"}},"class"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#FFCB6B"}},"T"),e("span",{style:{color:"#89DDFF"}},">")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"inline"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#FFCB6B"}},"T"),e("span",{style:{color:"#C792EA"}},"&"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#82AAFF"}},"min"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#FFCB6B"}},"T"),e("span",{style:{color:"#C792EA"}},"&"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"a"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#FFCB6B"}},"T"),e("span",{style:{color:"#C792EA"}},"&"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"b"),e("span",{style:{color:"#89DDFF"}},")")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"{")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),e("span",{style:{color:"#A6ACCD"}}," b"),e("span",{style:{color:"#89DDFF"}},"<"),e("span",{style:{color:"#A6ACCD"}},"a"),e("span",{style:{color:"#89DDFF"}},"?"),e("span",{style:{color:"#A6ACCD"}},"b"),e("span",{style:{color:"#89DDFF"}},":"),e("span",{style:{color:"#A6ACCD"}},"a"),e("span",{style:{color:"#89DDFF"}},";")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"}")]),l(`
`),e("span",{class:"line"}),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#676E95","font-style":"italic"}},"//usage:")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"{")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"stone "),e("span",{style:{color:"#82AAFF"}},"r1"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F78C6C"}},"2"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#F78C6C"}},"3"),e("span",{style:{color:"#89DDFF"}},"),"),e("span",{style:{color:"#82AAFF"}},"r2"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F78C6C"}},"3"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#F78C6C"}},"3"),e("span",{style:{color:"#89DDFF"}},"),"),e("span",{style:{color:"#F07178"}},"r3"),e("span",{style:{color:"#89DDFF"}},";")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    r3 "),e("span",{style:{color:"#89DDFF"}},"="),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#82AAFF"}},"min"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F07178"}},"r1"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#F07178"}},"r2"),e("span",{style:{color:"#89DDFF"}},");"),e("span",{style:{color:"#676E95","font-style":"italic"}}," //stone 类要重载 <")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"}")]),l(`
`),e("span",{class:"line"})])])],-1),De=e("ul",null,[e("li",null,"函数模板在使用时编译器会自动推导参数")],-1),me={id:"_3-member-template，成员模板",tabindex:"-1"},_e=e("div",{class:"language-cpp"},[e("span",{class:"copy"}),e("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"template"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#89DDFF"}},"<"),e("span",{style:{color:"#C792EA"}},"class"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#FFCB6B"}},"T1"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#C792EA"}},"class"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#FFCB6B"}},"T2"),e("span",{style:{color:"#89DDFF"}},">")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"struct"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"pair"),e("span",{style:{color:"#89DDFF"}},"{")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#F78C6C"}},"typedef"),e("span",{style:{color:"#F07178"}}," T1 first_type"),e("span",{style:{color:"#89DDFF"}},";")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#F78C6C"}},"typedef"),e("span",{style:{color:"#F07178"}}," T2 second_type"),e("span",{style:{color:"#89DDFF"}},";")]),l(`
`),e("span",{class:"line"}),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    T1 first"),e("span",{style:{color:"#89DDFF"}},";")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    T2 second"),e("span",{style:{color:"#89DDFF"}},";")]),l(`
`),e("span",{class:"line"}),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#82AAFF"}},"pair"),e("span",{style:{color:"#89DDFF"}},"():"),e("span",{style:{color:"#82AAFF"}},"first"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#82AAFF"}},"T1"),e("span",{style:{color:"#89DDFF"}},"()),"),e("span",{style:{color:"#82AAFF"}},"secoond"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#82AAFF"}},"T2"),e("span",{style:{color:"#89DDFF"}},"()){}")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#82AAFF"}},"pair"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"T1"),e("span",{style:{color:"#C792EA"}},"&"),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"a"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"T2"),e("span",{style:{color:"#C792EA"}},"&"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"b"),e("span",{style:{color:"#89DDFF"}},"):"),e("span",{style:{color:"#82AAFF"}},"first"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F07178"}},"a"),e("span",{style:{color:"#89DDFF"}},"),"),e("span",{style:{color:"#82AAFF"}},"second"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F07178"}},"b"),e("span",{style:{color:"#89DDFF"}},"){}")]),l(`
`),e("span",{class:"line"}),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#C792EA"}},"template"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"<"),e("span",{style:{color:"#C792EA"}},"class"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"U1"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#C792EA"}},"class"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"U2"),e("span",{style:{color:"#89DDFF"}},">")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#82AAFF"}},"pair"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"pair"),e("span",{style:{color:"#89DDFF"}},"<"),e("span",{style:{color:"#FFCB6B"}},"U1"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#FFCB6B"}},"U2"),e("span",{style:{color:"#89DDFF"}},">"),e("span",{style:{color:"#C792EA"}},"&"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"p"),e("span",{style:{color:"#89DDFF"}},"):"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#82AAFF"}},"first"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#A6ACCD"}},"p"),e("span",{style:{color:"#89DDFF"}},"."),e("span",{style:{color:"#A6ACCD"}},"first"),e("span",{style:{color:"#89DDFF"}},"),"),e("span",{style:{color:"#82AAFF"}},"second"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#A6ACCD"}},"p"),e("span",{style:{color:"#89DDFF"}},"."),e("span",{style:{color:"#A6ACCD"}},"seconnd"),e("span",{style:{color:"#89DDFF"}},"){}")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"};")]),l(`
`),e("span",{class:"line"})])])],-1),fe=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633004610276-95b4b70e-f8cc-4fc5-b9d8-346bd0cef352.png#clientId=u82b0baa9-a308-4&from=paste&height=384&id=ua62b1a37&margin=%5Bobject%20Object%5D&name=image.png&originHeight=767&originWidth=1413&originalType=binary&ratio=1&size=211950&status=done&style=none&taskId=ue5d2f50e-8b05-4a74-a261-4dd3d963434&width=706.5",alt:""})],-1),be=e("p",null,"A：在生活中鲫鱼是属于鱼类的，麻雀是属于鸟类的，反过来是不能说鱼类属于鲫鱼，鸟类属于麻雀的，所以是不可以的。这段代码实现的也是这样的效果。",-1),Ce=e("p",null,[l("类模板允许了 first 和 second 可以是任意类型 T1，T2，成员模板又允许了 pair 的构造函数可以传递任意类型的 "),e("code",null,"pair<U1,U2>"),l("，但是必须满足 first(p.first)，second(p.second) 可以成立，所以反过来时，父类是无法赋值给子类的，所以不可以。")],-1),Ae=e("blockquote",null,[e("p",null,"Q：为什么不把 U1，U2 写成 T1，T2 呢？ A：因为这样写的话，就没法让子类做构造函数的参数了")],-1),ve=e("ul",null,[e("li",null,"使用成员模板可以是成员函数的参数更加灵活，比如能接受继承关系下的子类"),e("li",null,[l("父类指针指向子类，这种写法叫做"),e("strong",null,"up-cast"),l("，"),e("strong",null,"上转型"),l("，只使用父类的方法。")]),e("li",null,"cpp 中的智能指针为了实现 up-cast，就需要在 ctor 使用成员模板来接纳子类指针")],-1),ke={id:"_5-specialization，模板特化",tabindex:"-1"},Be=e("div",{class:"language-cpp"},[e("span",{class:"copy"}),e("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#676E95","font-style":"italic"}},"//模板泛化")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"template"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#89DDFF"}},"<"),e("span",{style:{color:"#C792EA"}},"class"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#FFCB6B"}},"Key"),e("span",{style:{color:"#89DDFF"}},">")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"struct"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"hash"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"{"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"};")]),l(`
`),e("span",{class:"line"}),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#676E95","font-style":"italic"}},"//模板特化。特化就是绑定的意思，因为绑定了，所以 template 里面什么都没有")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"template"),e("span",{style:{color:"#89DDFF"}},"<>")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"sturct hash"),e("span",{style:{color:"#89DDFF"}},"<"),e("span",{style:{color:"#C792EA"}},"char"),e("span",{style:{color:"#89DDFF"}},">"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#89DDFF"}},"{")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"size_t"),e("span",{style:{color:"#F07178"}}," operator"),e("span",{style:{color:"#89DDFF"}},"()("),e("span",{style:{color:"#C792EA"}},"char"),e("span",{style:{color:"#F07178"}}," x"),e("span",{style:{color:"#89DDFF"}},")"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"{"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),e("span",{style:{color:"#F07178"}}," x"),e("span",{style:{color:"#89DDFF"}},";"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"};")]),l(`
`),e("span",{class:"line"}),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"template"),e("span",{style:{color:"#89DDFF"}},"<>")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"sturct hash"),e("span",{style:{color:"#89DDFF"}},"<"),e("span",{style:{color:"#C792EA"}},"int"),e("span",{style:{color:"#89DDFF"}},">"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"{")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"size_t"),e("span",{style:{color:"#F07178"}}," operator"),e("span",{style:{color:"#89DDFF"}},"()("),e("span",{style:{color:"#C792EA"}},"int"),e("span",{style:{color:"#F07178"}}," x"),e("span",{style:{color:"#89DDFF"}},")"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"{"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),e("span",{style:{color:"#F07178"}}," x"),e("span",{style:{color:"#89DDFF"}},";"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"}")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"};")]),l(`
`),e("span",{class:"line"}),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"template"),e("span",{style:{color:"#89DDFF"}},"<>")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"sturct hash"),e("span",{style:{color:"#89DDFF"}},"<"),e("span",{style:{color:"#C792EA"}},"long"),e("span",{style:{color:"#89DDFF"}},">"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"{")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"size_t"),e("span",{style:{color:"#F07178"}}," operator"),e("span",{style:{color:"#89DDFF"}},"()("),e("span",{style:{color:"#C792EA"}},"long"),e("span",{style:{color:"#F07178"}}," x"),e("span",{style:{color:"#89DDFF"}},")"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"const"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"{"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),e("span",{style:{color:"#F07178"}}," x"),e("span",{style:{color:"#89DDFF"}},";}")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"};")]),l(`
`),e("span",{class:"line"})])])],-1),we=e("ul",null,[e("li",null,"特化与泛化相对，泛化是希望模板能完成所有的同类的事，而特化是希望特定的模板完成特定的事"),e("li",null,"泛化为用到 template 的所有代码，而特化只用到特化的那一段")],-1),Ee={id:"_6-partial-specialization，模板偏特化",tabindex:"-1"},xe=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633008691922-bc5f1c0a-5fcd-4113-9415-61fdaa629a1a.png#clientId=u82b0baa9-a308-4&from=paste&height=302&id=u33aff8b1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=603&originWidth=981&originalType=binary&ratio=1&size=90077&status=done&style=none&taskId=u87468b83-7a93-4871-acab-8fe3bfa14a7&width=491",alt:""})],-1),Te=e("ul",null,[e("li",null,"个数的上的偏，template 的前几个参数是指定的")],-1),je=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633008719626-0a1cd3b1-81ac-4b00-8ab8-a94142a4a96c.png#clientId=u82b0baa9-a308-4&from=paste&height=361&id=uda9a5dc1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=721&originWidth=1053&originalType=binary&ratio=1&size=108566&status=done&style=none&taskId=u7f148a2d-d1dd-48b6-b11d-e234e31a41d&width=526.5",alt:""})],-1),ze=e("ul",null,[e("li",null,"范围上的偏，template 的 T 原本是任意类型，现在被限制在了指针类型 T*")],-1),Ie=e("blockquote",null,[e("p",null,"特化（Specialization） 泛化（Full Specialization） 偏特化（Partial Specialization）")],-1),Oe={id:"_7-template-template-parameter，模板模板参数",tabindex:"-1"},qe=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633009153029-db5fb291-864b-4c4c-ae59-552c6889e2a9.png#clientId=u82b0baa9-a308-4&from=paste&height=374&id=ua000bc7f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=748&originWidth=899&originalType=binary&ratio=1&size=119062&status=done&style=none&taskId=u8952493a-fa7d-48b1-9fad-2d9b6985ea2&width=449.5",alt:""})],-1),We=e("ul",null,[e("li",null,"Container 只是一个代名词，相当于 abcd，它用模板的第一个参数做参数"),e("li",null,"当想要使用模板做为类模板的参数时，就需要如图中这样定义，比如第二个参数是没指定类型的模板容器")],-1),He=e("blockquote",null,[e("p",null,[l("Q：第二个参数要指定成模板的话，那为什么 "),e("code",null,"XCls<string，list>"),l(" 报错了呢？ A：按 "),e("code",null,"XCls<string,list>"),l("的写法，"),e("code",null,"Container<T>"),l(" 会变成 "),e("code",null,"list<T>"),l("，这应该是行的通的，为什么行不通了呢？ 因为 cpp 的容器模板有第二模板参数，甚至第三模板参数，我们平常用的时候不需要写是因为他们有默认值，但是这里的语法是过不了的。 正确的写法是加上上图第二个框那里的内容。这是 Cpp2.0 里的新特性，先不做解释。")])],-1),Ve=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633010834085-8c8d0243-1d25-4b12-9033-68e98092e09f.png#clientId=u82b0baa9-a308-4&from=paste&height=375&id=u84266ec2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=749&originWidth=902&originalType=binary&ratio=1&size=127509&status=done&style=none&taskId=u6f9f264d-1b5c-475f-ab99-7b7a7fd88a4&width=451",alt:""})],-1),Pe=e("ul",null,[e("li",null,"shared_ptr 和 auto_ptr 之所以能过编译是因为他们都只有一个模板参数，而且模板参数可以指定为 string")],-1),Se=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633010956788-6e3284a5-d1e7-4bcf-8ad8-9a0806ed7c52.png#clientId=u82b0baa9-a308-4&from=paste&height=311&id=ucf4845c8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=622&originWidth=1182&originalType=binary&ratio=1&size=117187&status=done&style=none&taskId=u951654c5-ac8f-444f-863a-1ce1883070d&width=591",alt:""})],-1),Ne=e("ul",null,[e("li",null,"第一个用例，因为第二个参数有默认值，所以可以只指定一个模板参数"),e("li",null,"第二个用例，第二个参数也可以这样写，但第二个参数已经绑定写死了，已经不再是模板了，所以与上面的模板模板参数不同，上面是模板做参数，下面是绑定的模板做参数")],-1),Ue={id:"六、c-标准库以及-c-11",tabindex:"-1"},$e={id:"_1-c-标准库",tabindex:"-1"},Me=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633347596832-4dac211f-b3b7-4ca8-9a52-b4aeabfacfc4.png#clientId=u534f1ca2-1e6f-4&from=paste&height=500&id=ucad45ffb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1815&originalType=binary&ratio=1&size=828133&status=done&style=none&taskId=u7525216a-afe9-4523-a4d1-6321a878804&width=908",alt:""})],-1),Re=e("ul",null,[e("li",null,"作为初学者一定要多使用、熟用标准库"),e("li",null,"标准库的两大部分：容器和算法"),e("li",null,"algorithm + data structures = programs"),e("li",null,"programs + data = software"),e("li",null,"对库的学习，看代码的效果不太好，需要自己去写调用测试的小例子")],-1),Le={id:"_2-c-11-的学习建议",tabindex:"-1"},Qe=e("p",null,"优先学习：",-1),Ye=e("ul",null,[e("li",null,"variadic template"),e("li",null,"auto"),e("li",null,"range-base for loop")],-1),Ze=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633348687696-532b5fc1-327d-4764-9fde-8ed5460edf99.png#clientId=u534f1ca2-1e6f-4&from=paste&height=500&id=o4K6p&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1513&originalType=binary&ratio=1&size=446692&status=done&style=none&taskId=ua87b9ba0-0ea1-483d-a462-56f4e09a481&width=756.5",alt:""})],-1),Ge=e("blockquote",null,[e("p",null,[l("Q：了解编译器对 C++11 的支持，不同的平台可能需要不同的设置，如何确定自己是否设置成功了呢？ A：如上图，"),e("strong",null,"cplusplus 在 C++98 和 C++11 中的定义值不同，故可通过输出"),l("cplusplus 的值来判断是否支持 C++11")])],-1),Je={id:"_3-variable-templates（since-c-11），数量不定的模版参数",tabindex:"-1"},Ke=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633349157682-2f20e70b-5bdc-428f-9a1c-7d0c77ba3b8b.png#clientId=u534f1ca2-1e6f-4&from=paste&height=500&id=ua2f33a21&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1512&originalType=binary&ratio=1&size=358091&status=done&style=none&taskId=ud620e292-5b8f-4ebc-9519-43771afca57&width=756",alt:""})],-1),Xe=e("ul",null,[e("li",null,"variadic 是一个生造的词，var 这个词根意为可变化的"),e("li",null,'作用：允许你写任意个数的模版参数，通过"..."语法'),e("li",null,[l("写法解释： "),e("ul",null,[e("li",null,[l("这个模版函数放进去的模版参数分为两个部分，一个和一包 (pack)，一个 T 和一包 Types，"),e("code",null,"typename T"),l("代表的是模版参数可以是任意类型，而"),e("code",null,"typename... Types"),l("代表的是模版参数可以是任意类型且任意数量")]),e("li",null,[l("然后在函数模版中使用"),e("code",null,"Types..."),l("来声明函数参数（注意这里是函数参数，而非模版参数），被声明为"),e("code",null,"Types..."),l("类型的函数参数 args 就会代表接收任意类型的任意数量的参数")]),e("li",null,[l("之后在函数的"),e("code",null,"scope"),l("中使用的"),e("code",null,"args..."),l("就会代表传进来的任意类型任意数量的参数包（pack）")]),e("li",null,[l('Usage 中展示的是一种递归调用的写法，其中编译器会自动匹配"一个和一个包"的界限在哪，或者说，函数接收'),e("code",null,"args..."),l("就相当于接受了一大块参数，然后根据"),e("code",null,"print(T,Types)"),l("来匹配参数")]),e("li",null,[l("最后当参数 args 只剩一个时，args 被分配给前面的 T，"),e("strong",null,"下一层的 args 接受到的参数是 0 个"),l("，所以要写一个"),e("code",null,"void print(){}"),l("。")])])]),e("li",null,'使用：使用时，因为是函数模版，所以无需指定类型，根据函数的内容，bitset 类型应该重载"<<"')],-1),el={id:"_4-auto（since-c-11）-自动类型推断",tabindex:"-1"},ll=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633356003881-90855d5d-fe7b-4e38-b12a-f96b2faf023b.png#clientId=u534f1ca2-1e6f-4&from=paste&height=500&id=uce06d735&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1590&originalType=binary&ratio=1&size=201030&status=done&style=none&taskId=u6155f9f8-affc-42b4-b477-8dd060300d7&width=795",alt:""})],-1),sl=e("ul",null,[e("li",null,"auto 是一种语法糖，请求编译器自动推导变量的类型"),e("li",null,"全部都用 auto 是一种非常极端的做法，一般都是太长不想写，或者一些特殊情况下不知道怎么写类型时才使用 auto")],-1),nl={id:"_5-ranged-base-for-since-c-11",tabindex:"-1"},ol=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633356434038-651e6c4f-edcc-4ff3-a845-533cc26616f1.png#clientId=u534f1ca2-1e6f-4&from=paste&height=500&id=u704a66df&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1458&originalType=binary&ratio=1&size=208660&status=done&style=none&taskId=u2ecbc165-da9a-4291-9d44-c8649bff45d&width=729",alt:""})],-1),tl=e("ul",null,[e("li",null,"用于遍历容器（collection），配合 auto 使用简直不要太爽"),e("li",null,"auto 是 pass by value，auto 也可以加上引用变成 auto&，pass by reference")],-1),al={id:"_6-reference-再解",tabindex:"-1"},cl=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633511333553-2c7b0697-0d3e-4c54-99e9-e97f4f075ae0.png#clientId=u85f071dc-c011-4&from=paste&height=500&id=u52e529e8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1624&originalType=binary&ratio=1&size=278801&status=done&style=none&taskId=u4f876a83-4b55-48ab-a830-fa16647de4b&width=812",alt:""})],-1),rl=e("ul",null,[e("li",null,[e("code",null,"&"),l("出现的位置不同的意思也不同，"),e("code",null,"&x"),l("表示取 x 的地址，属于运算符，"),e("code",null,"int& r = x;"),l("表示 r is a reference to int x（从右往左念），从此"),e("code",null,"r"),l("就代表"),e("code",null,"x"),l("，且它无法代表其他的东西")]),e("li",null,[l("因为"),e("code",null,"r"),l("代表"),e("code",null,"x"),l("，所以"),e("code",null,"sizeof(r)"),l("就相当于"),e("code",null,"sizeof(x)"),l("，"),e("code",null,"&x"),l("就相当于"),e("code",null,"&r"),l("，计算"),e("code",null,"r"),l("的地址和大小的结果和"),e("code",null,"x"),l("完全一样，但这是一种编译器故意做出来的假象，对用户将引用以一种别名的方式展现")]),e("li",null,[l("实际上"),e("code",null,"r"),l("的真实大小和一个指针的大小一样，并且有自己独立的地址，所有的编译器对待"),e("code",null,"&"),l("都是通过指针的方式来实现的，所以在函数传递值时，如果传递引用的话，就只需要传 4 个字节（32 位环境下）")])],-1),il={id:"_7-refernce-usage，引用与函数签名",tabindex:"-1"},pl=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633513732449-a6386d00-21d2-4ad0-8dfd-c6e5e8467f39.png#clientId=u55601451-dbdd-4&from=paste&height=500&id=u73a7227f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1518&originalType=binary&ratio=1&size=295140&status=done&style=none&taskId=ue5abda25-1493-4cf8-a63c-7b2682da3f6&width=759",alt:""})],-1),dl=e("ul",null,[e("li",null,"Reference 很少用来声明变量"),e("li",null,"函数参数传递")],-1),yl=e("blockquote",null,[e("p",null,[l("Q：为什么上图的二者不能同时存在？ A：因为他们的函数签名相同，函数签名包括函数名称和参数列表和其后的"),e("code",null,"const"),l("，不包括返回值，变量前有没有"),e("code",null,"&和const"),l("都为相同的签名。 这两者当然是不能同时存在的，如果同时存在的话，这两个函数都可以接受 double 类型的变量，那么编译器将不知道"),e("code",null,"imag(im)"),l("该调用那一个，所以这是不能同时存在的。")])],-1),Fl={id:"七、对象模型（object-model）",tabindex:"-1"},ul={id:"_1-vptr-and-vtbl，虚指针和虚表",tabindex:"-1"},hl=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633518636979-e2d456cc-5e56-4bbd-a2f0-e8ed8fe3147c.png#clientId=u3c663784-e512-4&from=paste&height=500&id=u43dea117&margin=%5Bobject%20Object%5D&name=image.png&originHeight=999&originWidth=1620&originalType=binary&ratio=1&size=401988&status=done&style=none&taskId=u4ae509dc-e371-42b1-aebc-bf1162397ce&width=810",alt:""})],-1),gl=e("ul",null,[e("li",null,"Vptr 和 Vtbl 在代码层面上是看不到的"),e("li",null,"只要 class 中存在 virtual function，一个也好，一万个也好，class 的 object 中就会有一个指针"),e("li",null,"这个指针指向 Vtbl，Vtbl 存有虚函数的地址，编译器在处理虚函数时就会根据这条路径来")],-1),Dl=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633524239296-e859f205-238f-4f4a-9911-81f735600f9d.png#clientId=u0b927a94-c298-4&from=paste&height=500&id=u79d8bd13&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1848&originalType=binary&ratio=1&size=405590&status=done&style=none&taskId=ud1cc4db2-6a6a-4495-9bc6-fcd7c417715&width=924",alt:""})],-1),ml=e("ul",null,[e("li",null,"容器内想要存放各种各样的子类的话，就需要将容器的元素指定为父类指针，因为容器只能存放相同大小的元素"),e("li",null,[l("而父类指针想要调用不同子类的同名函数"),e("code",null,"draw()"),l("就需要父类将"),e("code",null,"draw()"),l("写成 virtual 的，以实现多态")])],-1),_l={id:"_3-dynamic-binding，动态绑定",tabindex:"-1"},fl=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633527316167-e99968bc-648d-4c24-981d-e72defdb9ac1.png#clientId=u87bf5087-5e9a-4&from=paste&height=500&id=ue03e94c5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1614&originalType=binary&ratio=1&size=356547&status=done&style=none&taskId=u608e0581-c940-476d-af57-476f8f454ab&width=807",alt:""})],-1),bl=e("ul",null,[e("li",null,"C++ 编译器看到一个函数调用，他有两个考量，他是将他动态绑定，还是将他静态绑定。"),e("li",null,[l("静态绑定就是被编译为 Call xxxx（函数地址），动态绑定就是被编译成"),e("code",null,"(*p->vptr[n])(p)"),l("这种样子，具体调用谁要看 p 指向 a 还是 b 还 c。")]),e("li",null,"动态绑定的三个条件：通过指针调用，指针向上转型，虚函数")],-1),Cl={id:"_4-const，常量",tabindex:"-1"},Al=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633527419455-f7502b76-81c2-4d89-8a1b-1ce59d06290e.png#clientId=u87bf5087-5e9a-4&from=paste&height=500&id=u8428d7d8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=999&originWidth=1623&originalType=binary&ratio=1&size=370389&status=done&style=none&taskId=ub3f722fd-befc-437c-92e9-a3d2a31ba15&width=811.5",alt:""})],-1),vl=e("ul",null,[e("li",null,"当成员函数的 const 和 non-const 版本同时存在，const object 只会（只能）调用 const 版本，non-const object 只会（只能）调用 non-const 版本，这就解释了为什么，函数末尾的 const 是属于函数签名的。"),e("li",null,"const 该加就要加，菜鸟才会一个 const 不写")],-1),kl=e("blockquote",null,[e("p",null,[e("code",null,"std::basic_string<...>"),l("经过 typedef 后就是标准库中的 string Q：为什么这里要设计两个这样的函数，一个带 const，一个不带 const 呢？ A：我们所使用的 string 是一个 reference counting 计数的技巧，相同内容的字符串是共享的，比如拷贝 3 个 string，那么这 3 个 string 和原字符串互相共享同一个字符串内容。 既然是共享内容的，那么就涉及到一个数据变化的问题，假如原字符串要改，那么就应该复制一份不共享的给他改，而不影响其他之前复制的字符串。 "),e("code",null,"oparator[]"),l("就可能更改字符串的内容，所以如果"),e("code",null,"operator[]"),l("操作要改字符串的话，就需要做 copy on write 这个动作。如果不改（比如调用者是 const）则就不需要，所以要实现两个这样的函数。 ​")])],-1),Bl=e("blockquote",null,[e("p",null,[l("这里又涉及到一个问题： Q：non-const object 如果调用"),e("code",null,"operator[] const"),l("怎么办？这样不就没有 coyp and write 的过程了吗？ A：当成员函数的 const 和 non-const 版本同时存在，const object 只 会（只能）调用 const 版本，non-const object 只会（只能）调用 non-const 版本，repeat again。这是 Cpp 考虑到这种情况后规定的。")])],-1),wl={id:"八、内存管理（memory-management）",tabindex:"-1"},El={id:"_1-overload-operator-new-operator-delete-operator-new-，-operator-delete",tabindex:"-1"},xl=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633533113257-3e776f8e-e7ab-47e1-b818-73294339c8a7.png#clientId=u8a2088c1-6489-4&from=paste&height=500&id=u1ff8687d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=999&originWidth=1636&originalType=binary&ratio=1&size=578333&status=done&style=none&taskId=u189e4106-4bb8-4726-a2c7-842bd23c2bb&width=818",alt:""})],-1),Tl=e("ul",null,[e("li",null,"我们使用的 new 和 delete 都是重新封装过的，编译器会编译成 operator new 和 operator delete，我们可以重载 operator new 和 operator delete 来进行内存管理")],-1),jl=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633532173058-b11bed83-6e25-40c5-817a-7904658ed438.png#clientId=uc2a8ab0f-20f6-4&from=paste&height=500&id=u83125cf2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1115&originalType=binary&ratio=1&size=295251&status=done&style=none&taskId=u8fb4085d-51a1-42b4-8cb5-3595967480c&width=557.5",alt:""})],-1),zl=e("ul",null,[e("li",null,[e("code",null,"::"),l("表示全局的，global，重载这些也需要实现原本 malloc 和 free 的功能，然后再添加别的功能")]),e("li",null,"operator new 的重载的第一个参数必须是 size_t 类型，返回值必须是 void* ，其他几个也是一样")],-1),Il={id:"_2-overload-operator-new-delete-using-member-function",tabindex:"-1"},Ol=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633603831167-36af9bc8-4736-4407-ad3b-ba160a60312c.png#clientId=u9d67bf23-57a0-4&from=paste&height=343&id=ued48f222&margin=%5Bobject%20Object%5D&name=image.png&originHeight=685&originWidth=1287&originalType=binary&ratio=1&size=134704&status=done&style=none&taskId=u1e71151b-966e-4d06-a11e-84d4350f89b&width=643.5",alt:""})],-1),ql=e("ul",null,[e("li",null,"编译器编译 new 和 delete，实际上 operator new、delete 只其分配内存的作用，传入的参数大小（分配的空间大小）都由编译器来推算，我们也只需要重载这两个函数分配内存的作用就行了")],-1),Wl=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633603856930-e59bdb9e-227c-4eaf-844f-7c169f38138a.png#clientId=u9d67bf23-57a0-4&from=paste&height=334&id=u33c96c9a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=667&originWidth=1364&originalType=binary&ratio=1&size=142688&status=done&style=none&taskId=u5b0e7546-73ab-4980-b18b-52ac80e349a&width=682",alt:""})],-1),Hl=e("ul",null,[e("li",null,"编译器编译 new[] 和 delete[]")],-1),Vl=e("blockquote",null,[e("p",null,"Q：编译器为什么要把 operator new[]的申请空间要 +4 呢？ A：从上面两图可以看到，operator new 和 operator new[]的实现没有什么区别，都是传入一个 size_t 的参数，但是 operator new[]传入的参数还额外申请了 4 个字节的空间 (一个整数的空间)，就是为了存储 N 的大小，方便之后调用 N 次 ctor 和 dtor")],-1),Pl=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633606167492-6c257f14-0d24-43ee-9d2b-549bd535fc5e.png#clientId=u9d67bf23-57a0-4&from=paste&height=392&id=u25dfcc81&margin=%5Bobject%20Object%5D&name=image.png&originHeight=784&originWidth=1398&originalType=binary&ratio=1&size=249110&status=done&style=none&taskId=u5eb2efcc-e226-4eba-878e-1046337c331&width=699",alt:""})],-1),Sl=e("ul",null,[e("li",null,"对于以 member function 重载的 operator new 和 operator delete 们，可以以::的方式绕过重载，使用全局的 operator new 和 operator delete，如上图")],-1),Nl={id:"_3-new-的内存分析",tabindex:"-1"},Ul=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633606837599-109c099a-6f93-494e-b4f2-cc37d67cc8a1.png#clientId=u9d67bf23-57a0-4&from=paste&id=u7363d5ce&margin=%5Bobject%20Object%5D&name=image.png&originHeight=793&originWidth=1345&originalType=binary&ratio=1&size=248891&status=done&style=none&taskId=u34aa00e9-a6a4-4212-bf29-24de687f433",alt:""})],-1),$l=e("div",{class:"language-cpp"},[e("span",{class:"copy"}),e("pre",{class:"shiki material-theme-palenight",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"class"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"Foo"),e("span",{style:{color:"#89DDFF"}},"{")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"public"),e("span",{style:{color:"#89DDFF"}},":")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#C792EA"}},"int"),e("span",{style:{color:"#F07178"}}," _id"),e("span",{style:{color:"#89DDFF"}},";")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#C792EA"}},"long"),e("span",{style:{color:"#F07178"}}," _data"),e("span",{style:{color:"#89DDFF"}},";")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    string _str"),e("span",{style:{color:"#89DDFF"}},";")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"public"),e("span",{style:{color:"#89DDFF"}},":")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#82AAFF"}},"Foo"),e("span",{style:{color:"#89DDFF"}},"():"),e("span",{style:{color:"#82AAFF"}},"_id"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F78C6C"}},"0"),e("span",{style:{color:"#89DDFF"}},")"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"{"),e("span",{style:{color:"#F07178"}},"cout"),e("span",{style:{color:"#89DDFF"}},"<<"),e("span",{style:{color:"#89DDFF"}},'"'),e("span",{style:{color:"#C3E88D"}},"default ctor.this="),e("span",{style:{color:"#89DDFF"}},'"'),e("span",{style:{color:"#89DDFF"}},"<<this<<"),e("span",{style:{color:"#89DDFF"}},'"'),e("span",{style:{color:"#C3E88D"}}," id="),e("span",{style:{color:"#89DDFF"}},'"'),e("span",{style:{color:"#89DDFF"}},"<<"),e("span",{style:{color:"#F07178"}},"_id"),e("span",{style:{color:"#89DDFF"}},";}")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#82AAFF"}},"Foo"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#C792EA"}},"int"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"i"),e("span",{style:{color:"#89DDFF"}},"):"),e("span",{style:{color:"#82AAFF"}},"_id"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F07178"}},"i"),e("span",{style:{color:"#89DDFF"}},"){"),e("span",{style:{color:"#F07178"}},"cout"),e("span",{style:{color:"#89DDFF"}},"<<"),e("span",{style:{color:"#89DDFF"}},'"'),e("span",{style:{color:"#C3E88D"}},"ctor.this = "),e("span",{style:{color:"#89DDFF"}},'"'),e("span",{style:{color:"#89DDFF"}},"<<this<<"),e("span",{style:{color:"#89DDFF"}},'"'),e("span",{style:{color:"#C3E88D"}}," id="),e("span",{style:{color:"#89DDFF"}},'"'),e("span",{style:{color:"#89DDFF"}},"<<"),e("span",{style:{color:"#F07178"}},"_id"),e("span",{style:{color:"#89DDFF"}},";}")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#676E95","font-style":"italic"}},"//virtual")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#82AAFF"}},"~Foo"),e("span",{style:{color:"#89DDFF"}},"()"),e("span",{style:{color:"#F07178"}},"   "),e("span",{style:{color:"#89DDFF"}},"{"),e("span",{style:{color:"#F07178"}},"cout"),e("span",{style:{color:"#89DDFF"}},"<<"),e("span",{style:{color:"#89DDFF"}},'"'),e("span",{style:{color:"#C3E88D"}},"dtor.this="),e("span",{style:{color:"#89DDFF"}},'"'),e("span",{style:{color:"#89DDFF"}},"<<this<<"),e("span",{style:{color:"#89DDFF"}},'"'),e("span",{style:{color:"#C3E88D"}}," id="),e("span",{style:{color:"#89DDFF"}},'"'),e("span",{style:{color:"#89DDFF"}},"<<"),e("span",{style:{color:"#F07178"}},"_id"),e("span",{style:{color:"#89DDFF"}},";}")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#C792EA"}},"static"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"void*"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#F78C6C"}},"operator"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"new"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#C792EA"}},"size_t"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"size"),e("span",{style:{color:"#89DDFF"}},");")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#C792EA"}},"static"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"void"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#F78C6C"}},"operator"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"delete"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#C792EA"}},"void*"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"pdead"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"size_t"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"size"),e("span",{style:{color:"#89DDFF"}},");")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#C792EA"}},"static"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"void*"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#F78C6C"}},"operator"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"new[]"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#C792EA"}},"size_t"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"size"),e("span",{style:{color:"#89DDFF"}},");")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#C792EA"}},"static"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"void"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#F78C6C"}},"operator"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#FFCB6B"}},"delete[]"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#C792EA"}},"void*"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"pdead"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#C792EA"}},"size_t"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"size"),e("span",{style:{color:"#89DDFF"}},");")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"};")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#C792EA"}},"void*"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#FFCB6B"}},"Foo"),e("span",{style:{color:"#89DDFF"}},"::"),e("span",{style:{color:"#F78C6C"}},"operator"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#FFCB6B"}},"new"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#C792EA"}},"size_t"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"size"),e("span",{style:{color:"#89DDFF"}},"){")]),l(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"}")]),l(`
`),e("span",{class:"line"})])])],-1),Ml=e("ul",null,[e("li",null,"Foo object 的数据部分占 12 个字节，int、long、string 各四个字节（32 位下）"),e("li",null,"如果 Foo 中有虚函数，每个 Foo object 则还会多 4 个字节，用于存储 Vptr，也就是指向 Vtbl 的指针，占 16 个字节"),e("li",null,"仔细看上图，ctor 和 dtor 调用的次数，和调用他们的地址，可以看到使用 ctor 和 dtor 的顺序是反的，而且 new[]时，预留了 4 个字节的空间来放 size，第一个 Foo object 的地址比申请来的空间的首地址要大 4。（每一个地址标记的空间的大小为 1bytes）")],-1),Rl={id:"_4-overload-placement-operator-new-delete",tabindex:"-1"},Ll=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633616711174-6c090629-b3ff-46ad-bd3b-7576057a6689.png#clientId=uc4b70e8f-f442-4&from=paste&height=500&id=ub89319d4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1759&originalType=binary&ratio=1&size=403838&status=done&style=none&taskId=udadaa88f-3e5a-44f4-8c38-7287c1a4e5c&width=879.5",alt:""})],-1),Ql=e("ul",null,[e("li",null,"operator new() 的返回值必须是 void*，第一个参数必须是 size_t 类型"),e("li",null,"也有人说其余的参数必须有指针才能叫 placement new，公说公有理，婆说婆有理"),e("li",null,"placement delete 只有当对应的 new 所调用的 ctor 抛出 exception，才会被调用")],-1),Yl=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633617158935-eaa8b97c-fabc-42d5-b55d-3a7fbaeea2aa.png#clientId=uc4b70e8f-f442-4&from=paste&height=500&id=ufa349fbc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1779&originalType=binary&ratio=1&size=395552&status=done&style=none&taskId=u822c257b-9a21-45c0-b514-a9b945ba2b2&width=889.5",alt:""}),e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633617478087-f41212fb-442e-46ae-ae41-3345324d7efb.png#clientId=uc4b70e8f-f442-4&from=paste&height=500&id=ufdaecacd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1632&originalType=binary&ratio=1&size=543028&status=done&style=none&taskId=u2a1b349e-64c2-403f-818e-44b185d9889&width=816",alt:""})],-1),Zl=e("ul",null,[e("li",null,"即使 placement delete 和 placement new 为一一对应也能编译通过，只是会有 Warning")],-1),Gl=e("blockquote",null,[e("p",null,"Q：为什么 5 号 ctor 抛出异常后程序结束了，而没有调用对应的 place ment operator delete？ A：异常抛出后会一层一层传递，直到最后的阶段，如果还没有人处理，程序就会调用一些函数将程序结束掉。这里很奇怪，在程序结束之前，对应的 placement operator delete 应该是会被调用的，在 G4.9 里没有调用，在 G4.2 里确实调用了，所以这个和编译器有关")],-1),Jl={id:"_5-basic-string-使用-new-extra-扩充申请量",tabindex:"-1"},Kl=e("p",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/1666065/1633619160832-7f8b87f9-8a1d-46e7-90ca-dcd2a50b8df4.png#clientId=uc4b70e8f-f442-4&from=paste&height=500&id=u46f399f3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1709&originalType=binary&ratio=1&size=450360&status=done&style=none&taskId=u4ee6bfdd-0465-4fa6-955c-178bc6ef5a6&width=854.5",alt:""})],-1);function Xl(t,es,ls,ss,r,ns){const n=g,i=p;return u(),F(i,{frontmatter:r.frontmatter,data:r.data},{"main-content-md":s(()=>[m,h(" more "),_,e("h1",f,[l("Object-Oriented-Programming "),o(n,{class:"header-anchor",href:"#object-oriented-programming","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),e("h1",b,[l("一、类型转换函数（Conversion function） "),o(n,{class:"header-anchor",href:"#一、类型转换函数（conversion-function）","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),C,A,e("h2",v,[l("1. Non-explicit-one-argument ctor "),o(n,{class:"header-anchor",href:"#_1-non-explicit-one-argument-ctor","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),k,B,e("h2",w,[l("2. Convertion function vs non-explicit-one-argument ctor "),o(n,{class:"header-anchor",href:"#_2-convertion-function-vs-non-explicit-one-argument-ctor","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),E,x,T,j,e("h2",z,[l("3. Explicit one-argument ctor "),o(n,{class:"header-anchor",href:"#_3-explicit-one-argument-ctor","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),I,O,e("h2",q,[l("4. Conversion function 在 STL 中的应用 "),o(n,{class:"header-anchor",href:"#_4-conversion-function-在-stl-中的应用","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),W,H,e("h1",V,[l("二、智能指针（Pointer-like classes） "),o(n,{class:"header-anchor",href:"#二、智能指针（pointer-like-classes）","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),e("h2",P,[l("1. Pointer like classes "),o(n,{class:"header-anchor",href:"#_1-pointer-like-classes","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),S,N,U,$,M,e("h2",R,[l("2. Iterator "),o(n,{class:"header-anchor",href:"#_2-iterator","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),L,Q,Y,Z,G,e("h1",J,[l("三、仿函数（Function like classes） "),o(n,{class:"header-anchor",href:"#三、仿函数（function-like-classes）","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),e("h2",K,[l("1. Operator “()”Overload "),o(n,{class:"header-anchor",href:"#_1-operator-“-”overload","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),X,ee,e("h2",le,[l("2. STL 中仿函数的继承 "),o(n,{class:"header-anchor",href:"#_2-stl-中仿函数的继承","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),se,ne,oe,te,e("h1",ae,[l("四、命名空间（Namespace） "),o(n,{class:"header-anchor",href:"#四、命名空间（namespace）","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),e("h2",ce,[l("1. Namespace 经验谈 "),o(n,{class:"header-anchor",href:"#_1-namespace-经验谈","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),re,ie,e("h1",pe,[l("Template Programming "),o(n,{class:"header-anchor",href:"#template-programming","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),e("h1",de,[l("五、模板（Class Template） "),o(n,{class:"header-anchor",href:"#五、模板（class-template）","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),e("h2",ye,[l("1. Class Template，类模板 "),o(n,{class:"header-anchor",href:"#_1-class-template，类模板","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),Fe,ue,e("h2",he,[l("2. Function Template，函数模板 "),o(n,{class:"header-anchor",href:"#_2-function-template，函数模板","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),ge,De,e("h2",me,[l("3. Member Template，成员模板 "),o(n,{class:"header-anchor",href:"#_3-member-template，成员模板","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),_e,fe,be,Ce,Ae,ve,e("h2",ke,[l("5. Specialization，模板特化 "),o(n,{class:"header-anchor",href:"#_5-specialization，模板特化","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),Be,we,e("h2",Ee,[l("6. Partial Specialization，模板偏特化 "),o(n,{class:"header-anchor",href:"#_6-partial-specialization，模板偏特化","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),xe,Te,je,ze,Ie,e("h2",Oe,[l("7. template template parameter，模板模板参数 "),o(n,{class:"header-anchor",href:"#_7-template-template-parameter，模板模板参数","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),qe,We,He,Ve,Pe,Se,Ne,e("h1",Ue,[l("六、C++标准库以及 C++ 11 "),o(n,{class:"header-anchor",href:"#六、c-标准库以及-c-11","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),e("h2",$e,[l("1. C++ 标准库 "),o(n,{class:"header-anchor",href:"#_1-c-标准库","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),Me,Re,e("h2",Le,[l("2. C++ 11 的学习建议 "),o(n,{class:"header-anchor",href:"#_2-c-11-的学习建议","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),Qe,Ye,Ze,Ge,e("h2",Je,[l("3. Variable Templates（since C++11），数量不定的模版参数 "),o(n,{class:"header-anchor",href:"#_3-variable-templates（since-c-11），数量不定的模版参数","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),Ke,Xe,e("h2",el,[l("4. Auto（since C++11）,自动类型推断 "),o(n,{class:"header-anchor",href:"#_4-auto（since-c-11）-自动类型推断","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),ll,sl,e("h2",nl,[l("5. Ranged-Base For (since C++11) "),o(n,{class:"header-anchor",href:"#_5-ranged-base-for-since-c-11","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),ol,tl,e("h2",al,[l("6.Reference 再解 "),o(n,{class:"header-anchor",href:"#_6-reference-再解","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),cl,rl,e("h2",il,[l("7. Refernce Usage，引用与函数签名 "),o(n,{class:"header-anchor",href:"#_7-refernce-usage，引用与函数签名","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),pl,dl,yl,e("h1",Fl,[l("七、对象模型（Object Model） "),o(n,{class:"header-anchor",href:"#七、对象模型（object-model）","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),e("h2",ul,[l("1. Vptr and Vtbl，虚指针和虚表 "),o(n,{class:"header-anchor",href:"#_1-vptr-and-vtbl，虚指针和虚表","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),hl,gl,Dl,ml,e("h2",_l,[l("3. Dynamic Binding，动态绑定 "),o(n,{class:"header-anchor",href:"#_3-dynamic-binding，动态绑定","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),fl,bl,e("h2",Cl,[l("4. Const，常量 "),o(n,{class:"header-anchor",href:"#_4-const，常量","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),Al,vl,kl,Bl,e("h1",wl,[l("八、内存管理（Memory Management） "),o(n,{class:"header-anchor",href:"#八、内存管理（memory-management）","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),e("h2",El,[l("1. Overload ::operator new,::operator delete,::operator new[]，::operator delete[] "),o(n,{class:"header-anchor",href:"#_1-overload-operator-new-operator-delete-operator-new-，-operator-delete","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),xl,Tl,jl,zl,e("h2",Il,[l("2. Overload operator new, delete Using Member Function "),o(n,{class:"header-anchor",href:"#_2-overload-operator-new-delete-using-member-function","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),Ol,ql,Wl,Hl,Vl,Pl,Sl,e("h2",Nl,[l("3. New[] 的内存分析 "),o(n,{class:"header-anchor",href:"#_3-new-的内存分析","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),Ul,$l,Ml,e("h2",Rl,[l("4. Overload placement operator new(), delete() "),o(n,{class:"header-anchor",href:"#_4-overload-placement-operator-new-delete","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),Ll,Ql,Yl,Zl,Gl,e("h2",Jl,[l("5. Basic_string 使用 new(extra) 扩充申请量 "),o(n,{class:"header-anchor",href:"#_5-basic-string-使用-new-extra-扩充申请量","aria-hidden":"true"},{default:s(()=>[l("#")]),_:1})]),Kl]),"main-header":s(()=>[a(t.$slots,"main-header")]),"main-header-after":s(()=>[a(t.$slots,"main-header-after")]),"main-nav":s(()=>[a(t.$slots,"main-nav")]),"main-content":s(()=>[a(t.$slots,"main-content")]),"main-content-after":s(()=>[a(t.$slots,"main-content-after")]),"main-nav-before":s(()=>[a(t.$slots,"main-nav-before")]),"main-nav-after":s(()=>[a(t.$slots,"main-nav-after")]),comment:s(()=>[a(t.$slots,"comment")]),footer:s(()=>[a(t.$slots,"footer")]),aside:s(()=>[a(t.$slots,"aside")]),"aside-custom":s(()=>[a(t.$slots,"aside-custom")]),default:s(()=>[a(t.$slots,"default")]),_:3},8,["frontmatter","data"])}const ps=d(D,[["render",Xl]]);export{is as __pageData,ps as default};
